From 166cacdc95ae75cbd2a022eaab431a581f2feec2 Mon Sep 17 00:00:00 2001
From: John Fitzpatrick <john@cyberfitz.org>
Date: Sat, 9 Aug 2025 10:34:25 -0700
Subject: [PATCH 01/38] feat: add multi-dimensional vector columns to database
 schema
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

- Add 768, 1024, 1536, 3072 dimension embedding columns to both archon_crawled_pages and archon_code_examples tables
- Create optimized ivfflat indexes for all vector dimensions with proper lists configuration
- Add dynamic search functions for dimension-specific queries with backward compatibility
- Update complete_setup.sql to include multi-dimensional columns for new installations
- Update RESET_DB.sql to handle new columns and functions in cleanup operations
- Create upgrade_multi_dimensional_vectors.sql for existing database migrations

Supports multiple embedding models:
- text-embedding-3-small (768, 1536 dimensions)
- text-embedding-3-large (3072 dimensions)
- text-embedding-ada-002 (1536 dimensions)
- Custom models requiring 1024 dimensions

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>
---
 migration/RESET_DB.sql                        |   4 +
 migration/complete_setup.sql                  | 201 +++++++++-
 .../upgrade_multi_dimensional_vectors.sql     | 359 ++++++++++++++++++
 3 files changed, 562 insertions(+), 2 deletions(-)
 create mode 100644 migration/upgrade_multi_dimensional_vectors.sql

diff --git a/migration/RESET_DB.sql b/migration/RESET_DB.sql
index eff218e..b481a00 100644
--- a/migration/RESET_DB.sql
+++ b/migration/RESET_DB.sql
@@ -133,6 +133,10 @@ BEGIN
     DROP FUNCTION IF EXISTS match_archon_crawled_pages(vector, int, jsonb, text) CASCADE;
     DROP FUNCTION IF EXISTS match_archon_code_examples(vector, int, jsonb, text) CASCADE;
     
+    -- Multi-dimensional search functions
+    DROP FUNCTION IF EXISTS match_archon_crawled_pages_dynamic(vector, vector, vector, vector, int, jsonb, text) CASCADE;
+    DROP FUNCTION IF EXISTS match_archon_code_examples_dynamic(vector, vector, vector, vector, int, jsonb, text) CASCADE;
+    
     -- Search functions (old without prefix)
     DROP FUNCTION IF EXISTS match_crawled_pages(vector, int, jsonb, text) CASCADE;
     DROP FUNCTION IF EXISTS match_code_examples(vector, int, jsonb, text) CASCADE;
diff --git a/migration/complete_setup.sql b/migration/complete_setup.sql
index d53fb7c..ec3f2bb 100644
--- a/migration/complete_setup.sql
+++ b/migration/complete_setup.sql
@@ -195,7 +195,11 @@ CREATE TABLE IF NOT EXISTS archon_crawled_pages (
     content TEXT NOT NULL,
     metadata JSONB NOT NULL DEFAULT '{}'::jsonb,
     source_id TEXT NOT NULL,
-    embedding VECTOR(1536),  -- OpenAI embeddings are 1536 dimensions
+    embedding VECTOR(1536),  -- Legacy 1536 dimension embeddings (default)
+    embedding_768 VECTOR(768),   -- For text-embedding-3-small with reduced dimensions
+    embedding_1024 VECTOR(1024), -- For custom models requiring 1024 dimensions
+    embedding_1536 VECTOR(1536), -- For text-embedding-3-small (default) and text-embedding-ada-002
+    embedding_3072 VECTOR(3072), -- For text-embedding-3-large high-dimension embeddings
     created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
     
     -- Add a unique constraint to prevent duplicate chunks for the same URL
@@ -210,6 +214,23 @@ CREATE INDEX ON archon_crawled_pages USING ivfflat (embedding vector_cosine_ops)
 CREATE INDEX idx_archon_crawled_pages_metadata ON archon_crawled_pages USING GIN (metadata);
 CREATE INDEX idx_archon_crawled_pages_source_id ON archon_crawled_pages (source_id);
 
+-- Multi-dimensional vector indexes for improved performance
+CREATE INDEX IF NOT EXISTS idx_archon_crawled_pages_embedding_768
+ON archon_crawled_pages USING ivfflat (embedding_768 vector_cosine_ops)
+WITH (lists = 1000);
+
+CREATE INDEX IF NOT EXISTS idx_archon_crawled_pages_embedding_1024
+ON archon_crawled_pages USING ivfflat (embedding_1024 vector_cosine_ops)
+WITH (lists = 1000);
+
+CREATE INDEX IF NOT EXISTS idx_archon_crawled_pages_embedding_1536
+ON archon_crawled_pages USING ivfflat (embedding_1536 vector_cosine_ops)
+WITH (lists = 1000);
+
+CREATE INDEX IF NOT EXISTS idx_archon_crawled_pages_embedding_3072
+ON archon_crawled_pages USING ivfflat (embedding_3072 vector_cosine_ops)
+WITH (lists = 1000);
+
 -- Create the code_examples table
 CREATE TABLE IF NOT EXISTS archon_code_examples (
     id BIGSERIAL PRIMARY KEY,
@@ -219,7 +240,11 @@ CREATE TABLE IF NOT EXISTS archon_code_examples (
     summary TEXT NOT NULL,  -- Summary of the code example
     metadata JSONB NOT NULL DEFAULT '{}'::jsonb,
     source_id TEXT NOT NULL,
-    embedding VECTOR(1536),  -- OpenAI embeddings are 1536 dimensions
+    embedding VECTOR(1536),  -- Legacy 1536 dimension embeddings (default)
+    embedding_768 VECTOR(768),   -- For text-embedding-3-small with reduced dimensions
+    embedding_1024 VECTOR(1024), -- For custom models requiring 1024 dimensions
+    embedding_1536 VECTOR(1536), -- For text-embedding-3-small (default) and text-embedding-ada-002
+    embedding_3072 VECTOR(3072), -- For text-embedding-3-large high-dimension embeddings
     created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
     
     -- Add a unique constraint to prevent duplicate chunks for the same URL
@@ -234,6 +259,23 @@ CREATE INDEX ON archon_code_examples USING ivfflat (embedding vector_cosine_ops)
 CREATE INDEX idx_archon_code_examples_metadata ON archon_code_examples USING GIN (metadata);
 CREATE INDEX idx_archon_code_examples_source_id ON archon_code_examples (source_id);
 
+-- Multi-dimensional vector indexes for code examples
+CREATE INDEX IF NOT EXISTS idx_archon_code_examples_embedding_768
+ON archon_code_examples USING ivfflat (embedding_768 vector_cosine_ops)
+WITH (lists = 1000);
+
+CREATE INDEX IF NOT EXISTS idx_archon_code_examples_embedding_1024
+ON archon_code_examples USING ivfflat (embedding_1024 vector_cosine_ops)
+WITH (lists = 1000);
+
+CREATE INDEX IF NOT EXISTS idx_archon_code_examples_embedding_1536
+ON archon_code_examples USING ivfflat (embedding_1536 vector_cosine_ops)
+WITH (lists = 1000);
+
+CREATE INDEX IF NOT EXISTS idx_archon_code_examples_embedding_3072
+ON archon_code_examples USING ivfflat (embedding_3072 vector_cosine_ops)
+WITH (lists = 1000);
+
 -- =====================================================
 -- SECTION 5: SEARCH FUNCTIONS
 -- =====================================================
@@ -312,6 +354,161 @@ BEGIN
 END;
 $$;
 
+-- Create dynamic search functions for multi-dimensional embeddings
+CREATE OR REPLACE FUNCTION match_archon_crawled_pages_dynamic (
+  query_embedding_768 VECTOR(768) DEFAULT NULL,
+  query_embedding_1024 VECTOR(1024) DEFAULT NULL,
+  query_embedding_1536 VECTOR(1536) DEFAULT NULL,
+  query_embedding_3072 VECTOR(3072) DEFAULT NULL,
+  match_count INT DEFAULT 10,
+  filter JSONB DEFAULT '{}'::jsonb,
+  source_filter TEXT DEFAULT NULL
+) RETURNS TABLE (
+  id BIGINT,
+  url VARCHAR,
+  chunk_number INTEGER,
+  content TEXT,
+  metadata JSONB,
+  source_id TEXT,
+  similarity FLOAT
+)
+LANGUAGE plpgsql
+AS $$
+#variable_conflict use_column
+BEGIN
+  -- Search using 768-dimension embeddings
+  IF query_embedding_768 IS NOT NULL THEN
+    RETURN QUERY
+    SELECT
+      id, url, chunk_number, content, metadata, source_id,
+      1 - (archon_crawled_pages.embedding_768 <=> query_embedding_768) AS similarity
+    FROM archon_crawled_pages
+    WHERE metadata @> filter
+      AND (source_filter IS NULL OR source_id = source_filter)
+      AND embedding_768 IS NOT NULL
+    ORDER BY archon_crawled_pages.embedding_768 <=> query_embedding_768
+    LIMIT match_count;
+  -- Search using 1024-dimension embeddings
+  ELSIF query_embedding_1024 IS NOT NULL THEN
+    RETURN QUERY
+    SELECT
+      id, url, chunk_number, content, metadata, source_id,
+      1 - (archon_crawled_pages.embedding_1024 <=> query_embedding_1024) AS similarity
+    FROM archon_crawled_pages
+    WHERE metadata @> filter
+      AND (source_filter IS NULL OR source_id = source_filter)
+      AND embedding_1024 IS NOT NULL
+    ORDER BY archon_crawled_pages.embedding_1024 <=> query_embedding_1024
+    LIMIT match_count;
+  -- Search using 1536-dimension embeddings
+  ELSIF query_embedding_1536 IS NOT NULL THEN
+    RETURN QUERY
+    SELECT
+      id, url, chunk_number, content, metadata, source_id,
+      1 - (archon_crawled_pages.embedding_1536 <=> query_embedding_1536) AS similarity
+    FROM archon_crawled_pages
+    WHERE metadata @> filter
+      AND (source_filter IS NULL OR source_id = source_filter)
+      AND embedding_1536 IS NOT NULL
+    ORDER BY archon_crawled_pages.embedding_1536 <=> query_embedding_1536
+    LIMIT match_count;
+  -- Search using 3072-dimension embeddings
+  ELSIF query_embedding_3072 IS NOT NULL THEN
+    RETURN QUERY
+    SELECT
+      id, url, chunk_number, content, metadata, source_id,
+      1 - (archon_crawled_pages.embedding_3072 <=> query_embedding_3072) AS similarity
+    FROM archon_crawled_pages
+    WHERE metadata @> filter
+      AND (source_filter IS NULL OR source_id = source_filter)
+      AND embedding_3072 IS NOT NULL
+    ORDER BY archon_crawled_pages.embedding_3072 <=> query_embedding_3072
+    LIMIT match_count;
+  -- Fallback to legacy embedding column
+  ELSE
+    RAISE EXCEPTION 'No query embedding provided';
+  END IF;
+END;
+$$;
+
+-- Create dynamic search function for code examples
+CREATE OR REPLACE FUNCTION match_archon_code_examples_dynamic (
+  query_embedding_768 VECTOR(768) DEFAULT NULL,
+  query_embedding_1024 VECTOR(1024) DEFAULT NULL,
+  query_embedding_1536 VECTOR(1536) DEFAULT NULL,
+  query_embedding_3072 VECTOR(3072) DEFAULT NULL,
+  match_count INT DEFAULT 10,
+  filter JSONB DEFAULT '{}'::jsonb,
+  source_filter TEXT DEFAULT NULL
+) RETURNS TABLE (
+  id BIGINT,
+  url VARCHAR,
+  chunk_number INTEGER,
+  content TEXT,
+  summary TEXT,
+  metadata JSONB,
+  source_id TEXT,
+  similarity FLOAT
+)
+LANGUAGE plpgsql
+AS $$
+#variable_conflict use_column
+BEGIN
+  -- Search using 768-dimension embeddings
+  IF query_embedding_768 IS NOT NULL THEN
+    RETURN QUERY
+    SELECT
+      id, url, chunk_number, content, summary, metadata, source_id,
+      1 - (archon_code_examples.embedding_768 <=> query_embedding_768) AS similarity
+    FROM archon_code_examples
+    WHERE metadata @> filter
+      AND (source_filter IS NULL OR source_id = source_filter)
+      AND embedding_768 IS NOT NULL
+    ORDER BY archon_code_examples.embedding_768 <=> query_embedding_768
+    LIMIT match_count;
+  -- Search using 1024-dimension embeddings
+  ELSIF query_embedding_1024 IS NOT NULL THEN
+    RETURN QUERY
+    SELECT
+      id, url, chunk_number, content, summary, metadata, source_id,
+      1 - (archon_code_examples.embedding_1024 <=> query_embedding_1024) AS similarity
+    FROM archon_code_examples
+    WHERE metadata @> filter
+      AND (source_filter IS NULL OR source_id = source_filter)
+      AND embedding_1024 IS NOT NULL
+    ORDER BY archon_code_examples.embedding_1024 <=> query_embedding_1024
+    LIMIT match_count;
+  -- Search using 1536-dimension embeddings
+  ELSIF query_embedding_1536 IS NOT NULL THEN
+    RETURN QUERY
+    SELECT
+      id, url, chunk_number, content, summary, metadata, source_id,
+      1 - (archon_code_examples.embedding_1536 <=> query_embedding_1536) AS similarity
+    FROM archon_code_examples
+    WHERE metadata @> filter
+      AND (source_filter IS NULL OR source_id = source_filter)
+      AND embedding_1536 IS NOT NULL
+    ORDER BY archon_code_examples.embedding_1536 <=> query_embedding_1536
+    LIMIT match_count;
+  -- Search using 3072-dimension embeddings
+  ELSIF query_embedding_3072 IS NOT NULL THEN
+    RETURN QUERY
+    SELECT
+      id, url, chunk_number, content, summary, metadata, source_id,
+      1 - (archon_code_examples.embedding_3072 <=> query_embedding_3072) AS similarity
+    FROM archon_code_examples
+    WHERE metadata @> filter
+      AND (source_filter IS NULL OR source_id = source_filter)
+      AND embedding_3072 IS NOT NULL
+    ORDER BY archon_code_examples.embedding_3072 <=> query_embedding_3072
+    LIMIT match_count;
+  -- Fallback to legacy embedding column
+  ELSE
+    RAISE EXCEPTION 'No query embedding provided';
+  END IF;
+END;
+$$;
+
 -- =====================================================
 -- SECTION 6: RLS POLICIES FOR KNOWLEDGE BASE
 -- =====================================================
diff --git a/migration/upgrade_multi_dimensional_vectors.sql b/migration/upgrade_multi_dimensional_vectors.sql
new file mode 100644
index 0000000..fda8674
--- /dev/null
+++ b/migration/upgrade_multi_dimensional_vectors.sql
@@ -0,0 +1,359 @@
+-- =====================================================
+-- ARCHON MULTI-DIMENSIONAL VECTORS UPGRADE SCRIPT
+-- =====================================================
+-- 
+-- This script upgrades existing Archon databases to support
+-- multi-dimensional vector embeddings (768, 1024, 1536, 3072 dimensions)
+-- for improved compatibility with different embedding models.
+--
+-- COMPATIBILITY: Works with existing Archon V2 Alpha databases
+-- SAFETY: All operations use IF NOT EXISTS to prevent conflicts
+-- 
+-- Usage:
+--   1. Connect to your existing Supabase/PostgreSQL database
+--   2. Run this script in the SQL editor
+--   3. Existing data and embeddings will be preserved
+--
+-- Features Added:
+--   - Multi-dimensional embedding columns for both tables
+--   - Performance-optimized ivfflat indexes for all dimensions
+--   - Dynamic search functions for dimension-specific queries
+--   - Backward compatibility with existing 1536-dimension embeddings
+--
+-- Models Supported:
+--   - 768: text-embedding-3-small (reduced dimensions)
+--   - 1024: Custom models requiring 1024 dimensions
+--   - 1536: text-embedding-3-small (default), text-embedding-ada-002
+--   - 3072: text-embedding-3-large (high-dimension embeddings)
+--
+-- Created: 2025-01-07
+-- =====================================================
+
+BEGIN;
+
+-- =====================================================
+-- SECTION 1: ADD MULTI-DIMENSIONAL EMBEDDING COLUMNS
+-- =====================================================
+
+DO $$ 
+BEGIN
+    RAISE NOTICE 'Adding multi-dimensional embedding columns...';
+    
+    -- Add new embedding columns to archon_crawled_pages
+    ALTER TABLE archon_crawled_pages 
+    ADD COLUMN IF NOT EXISTS embedding_768 VECTOR(768),
+    ADD COLUMN IF NOT EXISTS embedding_1024 VECTOR(1024),
+    ADD COLUMN IF NOT EXISTS embedding_1536 VECTOR(1536),
+    ADD COLUMN IF NOT EXISTS embedding_3072 VECTOR(3072);
+    
+    -- Add new embedding columns to archon_code_examples
+    ALTER TABLE archon_code_examples 
+    ADD COLUMN IF NOT EXISTS embedding_768 VECTOR(768),
+    ADD COLUMN IF NOT EXISTS embedding_1024 VECTOR(1024),
+    ADD COLUMN IF NOT EXISTS embedding_1536 VECTOR(1536),
+    ADD COLUMN IF NOT EXISTS embedding_3072 VECTOR(3072);
+    
+    -- Add comments to document the new columns
+    COMMENT ON COLUMN archon_crawled_pages.embedding_768 IS 'Vector embeddings with 768 dimensions (text-embedding-3-small reduced)';
+    COMMENT ON COLUMN archon_crawled_pages.embedding_1024 IS 'Vector embeddings with 1024 dimensions (custom models)';
+    COMMENT ON COLUMN archon_crawled_pages.embedding_1536 IS 'Vector embeddings with 1536 dimensions (text-embedding-3-small, text-embedding-ada-002)';
+    COMMENT ON COLUMN archon_crawled_pages.embedding_3072 IS 'Vector embeddings with 3072 dimensions (text-embedding-3-large)';
+    
+    COMMENT ON COLUMN archon_code_examples.embedding_768 IS 'Vector embeddings with 768 dimensions (text-embedding-3-small reduced)';
+    COMMENT ON COLUMN archon_code_examples.embedding_1024 IS 'Vector embeddings with 1024 dimensions (custom models)';
+    COMMENT ON COLUMN archon_code_examples.embedding_1536 IS 'Vector embeddings with 1536 dimensions (text-embedding-3-small, text-embedding-ada-002)';
+    COMMENT ON COLUMN archon_code_examples.embedding_3072 IS 'Vector embeddings with 3072 dimensions (text-embedding-3-large)';
+    
+    RAISE NOTICE 'Multi-dimensional embedding columns added successfully.';
+    
+EXCEPTION WHEN OTHERS THEN
+    RAISE NOTICE 'Error adding embedding columns: %', SQLERRM;
+    ROLLBACK;
+    RETURN;
+END $$;
+
+-- =====================================================
+-- SECTION 2: CREATE OPTIMIZED VECTOR INDEXES
+-- =====================================================
+
+DO $$
+BEGIN
+    RAISE NOTICE 'Creating optimized vector indexes for all dimensions...';
+    
+    -- Indexes for archon_crawled_pages multi-dimensional embeddings
+    CREATE INDEX IF NOT EXISTS idx_archon_crawled_pages_embedding_768
+    ON archon_crawled_pages USING ivfflat (embedding_768 vector_cosine_ops)
+    WITH (lists = 1000);
+    
+    CREATE INDEX IF NOT EXISTS idx_archon_crawled_pages_embedding_1024
+    ON archon_crawled_pages USING ivfflat (embedding_1024 vector_cosine_ops)
+    WITH (lists = 1000);
+    
+    CREATE INDEX IF NOT EXISTS idx_archon_crawled_pages_embedding_1536
+    ON archon_crawled_pages USING ivfflat (embedding_1536 vector_cosine_ops)
+    WITH (lists = 1000);
+    
+    CREATE INDEX IF NOT EXISTS idx_archon_crawled_pages_embedding_3072
+    ON archon_crawled_pages USING ivfflat (embedding_3072 vector_cosine_ops)
+    WITH (lists = 1000);
+    
+    -- Indexes for archon_code_examples multi-dimensional embeddings
+    CREATE INDEX IF NOT EXISTS idx_archon_code_examples_embedding_768
+    ON archon_code_examples USING ivfflat (embedding_768 vector_cosine_ops)
+    WITH (lists = 1000);
+    
+    CREATE INDEX IF NOT EXISTS idx_archon_code_examples_embedding_1024
+    ON archon_code_examples USING ivfflat (embedding_1024 vector_cosine_ops)
+    WITH (lists = 1000);
+    
+    CREATE INDEX IF NOT EXISTS idx_archon_code_examples_embedding_1536
+    ON archon_code_examples USING ivfflat (embedding_1536 vector_cosine_ops)
+    WITH (lists = 1000);
+    
+    CREATE INDEX IF NOT EXISTS idx_archon_code_examples_embedding_3072
+    ON archon_code_examples USING ivfflat (embedding_3072 vector_cosine_ops)
+    WITH (lists = 1000);
+    
+    RAISE NOTICE 'Vector indexes created successfully.';
+    
+EXCEPTION WHEN OTHERS THEN
+    RAISE NOTICE 'Error creating indexes: %', SQLERRM;
+    ROLLBACK;
+    RETURN;
+END $$;
+
+-- =====================================================
+-- SECTION 3: DYNAMIC SEARCH FUNCTIONS
+-- =====================================================
+
+DO $$
+BEGIN
+    RAISE NOTICE 'Creating dynamic multi-dimensional search functions...';
+    
+    -- Drop existing dynamic functions if they exist
+    DROP FUNCTION IF EXISTS match_archon_crawled_pages_dynamic(vector, vector, vector, vector, int, jsonb, text) CASCADE;
+    DROP FUNCTION IF EXISTS match_archon_code_examples_dynamic(vector, vector, vector, vector, int, jsonb, text) CASCADE;
+    
+EXCEPTION WHEN OTHERS THEN
+    RAISE NOTICE 'Note: No existing dynamic functions to drop (this is normal for first-time upgrade)';
+END $$;
+
+-- Create dynamic search function for documentation chunks
+CREATE OR REPLACE FUNCTION match_archon_crawled_pages_dynamic (
+  query_embedding_768 VECTOR(768) DEFAULT NULL,
+  query_embedding_1024 VECTOR(1024) DEFAULT NULL,
+  query_embedding_1536 VECTOR(1536) DEFAULT NULL,
+  query_embedding_3072 VECTOR(3072) DEFAULT NULL,
+  match_count INT DEFAULT 10,
+  filter JSONB DEFAULT '{}'::jsonb,
+  source_filter TEXT DEFAULT NULL
+) RETURNS TABLE (
+  id BIGINT,
+  url VARCHAR,
+  chunk_number INTEGER,
+  content TEXT,
+  metadata JSONB,
+  source_id TEXT,
+  similarity FLOAT
+)
+LANGUAGE plpgsql
+AS $$
+#variable_conflict use_column
+BEGIN
+  -- Search using 768-dimension embeddings
+  IF query_embedding_768 IS NOT NULL THEN
+    RETURN QUERY
+    SELECT
+      id, url, chunk_number, content, metadata, source_id,
+      1 - (archon_crawled_pages.embedding_768 <=> query_embedding_768) AS similarity
+    FROM archon_crawled_pages
+    WHERE metadata @> filter
+      AND (source_filter IS NULL OR source_id = source_filter)
+      AND embedding_768 IS NOT NULL
+    ORDER BY archon_crawled_pages.embedding_768 <=> query_embedding_768
+    LIMIT match_count;
+  -- Search using 1024-dimension embeddings
+  ELSIF query_embedding_1024 IS NOT NULL THEN
+    RETURN QUERY
+    SELECT
+      id, url, chunk_number, content, metadata, source_id,
+      1 - (archon_crawled_pages.embedding_1024 <=> query_embedding_1024) AS similarity
+    FROM archon_crawled_pages
+    WHERE metadata @> filter
+      AND (source_filter IS NULL OR source_id = source_filter)
+      AND embedding_1024 IS NOT NULL
+    ORDER BY archon_crawled_pages.embedding_1024 <=> query_embedding_1024
+    LIMIT match_count;
+  -- Search using 1536-dimension embeddings
+  ELSIF query_embedding_1536 IS NOT NULL THEN
+    RETURN QUERY
+    SELECT
+      id, url, chunk_number, content, metadata, source_id,
+      1 - (archon_crawled_pages.embedding_1536 <=> query_embedding_1536) AS similarity
+    FROM archon_crawled_pages
+    WHERE metadata @> filter
+      AND (source_filter IS NULL OR source_id = source_filter)
+      AND embedding_1536 IS NOT NULL
+    ORDER BY archon_crawled_pages.embedding_1536 <=> query_embedding_1536
+    LIMIT match_count;
+  -- Search using 3072-dimension embeddings
+  ELSIF query_embedding_3072 IS NOT NULL THEN
+    RETURN QUERY
+    SELECT
+      id, url, chunk_number, content, metadata, source_id,
+      1 - (archon_crawled_pages.embedding_3072 <=> query_embedding_3072) AS similarity
+    FROM archon_crawled_pages
+    WHERE metadata @> filter
+      AND (source_filter IS NULL OR source_id = source_filter)
+      AND embedding_3072 IS NOT NULL
+    ORDER BY archon_crawled_pages.embedding_3072 <=> query_embedding_3072
+    LIMIT match_count;
+  -- Fallback to legacy embedding column
+  ELSE
+    RAISE EXCEPTION 'No query embedding provided';
+  END IF;
+END;
+$$;
+
+-- Create dynamic search function for code examples
+CREATE OR REPLACE FUNCTION match_archon_code_examples_dynamic (
+  query_embedding_768 VECTOR(768) DEFAULT NULL,
+  query_embedding_1024 VECTOR(1024) DEFAULT NULL,
+  query_embedding_1536 VECTOR(1536) DEFAULT NULL,
+  query_embedding_3072 VECTOR(3072) DEFAULT NULL,
+  match_count INT DEFAULT 10,
+  filter JSONB DEFAULT '{}'::jsonb,
+  source_filter TEXT DEFAULT NULL
+) RETURNS TABLE (
+  id BIGINT,
+  url VARCHAR,
+  chunk_number INTEGER,
+  content TEXT,
+  summary TEXT,
+  metadata JSONB,
+  source_id TEXT,
+  similarity FLOAT
+)
+LANGUAGE plpgsql
+AS $$
+#variable_conflict use_column
+BEGIN
+  -- Search using 768-dimension embeddings
+  IF query_embedding_768 IS NOT NULL THEN
+    RETURN QUERY
+    SELECT
+      id, url, chunk_number, content, summary, metadata, source_id,
+      1 - (archon_code_examples.embedding_768 <=> query_embedding_768) AS similarity
+    FROM archon_code_examples
+    WHERE metadata @> filter
+      AND (source_filter IS NULL OR source_id = source_filter)
+      AND embedding_768 IS NOT NULL
+    ORDER BY archon_code_examples.embedding_768 <=> query_embedding_768
+    LIMIT match_count;
+  -- Search using 1024-dimension embeddings
+  ELSIF query_embedding_1024 IS NOT NULL THEN
+    RETURN QUERY
+    SELECT
+      id, url, chunk_number, content, summary, metadata, source_id,
+      1 - (archon_code_examples.embedding_1024 <=> query_embedding_1024) AS similarity
+    FROM archon_code_examples
+    WHERE metadata @> filter
+      AND (source_filter IS NULL OR source_id = source_filter)
+      AND embedding_1024 IS NOT NULL
+    ORDER BY archon_code_examples.embedding_1024 <=> query_embedding_1024
+    LIMIT match_count;
+  -- Search using 1536-dimension embeddings
+  ELSIF query_embedding_1536 IS NOT NULL THEN
+    RETURN QUERY
+    SELECT
+      id, url, chunk_number, content, summary, metadata, source_id,
+      1 - (archon_code_examples.embedding_1536 <=> query_embedding_1536) AS similarity
+    FROM archon_code_examples
+    WHERE metadata @> filter
+      AND (source_filter IS NULL OR source_id = source_filter)
+      AND embedding_1536 IS NOT NULL
+    ORDER BY archon_code_examples.embedding_1536 <=> query_embedding_1536
+    LIMIT match_count;
+  -- Search using 3072-dimension embeddings
+  ELSIF query_embedding_3072 IS NOT NULL THEN
+    RETURN QUERY
+    SELECT
+      id, url, chunk_number, content, summary, metadata, source_id,
+      1 - (archon_code_examples.embedding_3072 <=> query_embedding_3072) AS similarity
+    FROM archon_code_examples
+    WHERE metadata @> filter
+      AND (source_filter IS NULL OR source_id = source_filter)
+      AND embedding_3072 IS NOT NULL
+    ORDER BY archon_code_examples.embedding_3072 <=> query_embedding_3072
+    LIMIT match_count;
+  -- Fallback to legacy embedding column
+  ELSE
+    RAISE EXCEPTION 'No query embedding provided';
+  END IF;
+END;
+$$;
+
+-- =====================================================
+-- SECTION 4: VERIFICATION AND SUMMARY
+-- =====================================================
+
+DO $$
+DECLARE
+    crawled_pages_columns INTEGER;
+    code_examples_columns INTEGER;
+    total_indexes INTEGER;
+    dynamic_functions INTEGER;
+BEGIN
+    -- Count new embedding columns
+    SELECT COUNT(*) INTO crawled_pages_columns 
+    FROM information_schema.columns 
+    WHERE table_name = 'archon_crawled_pages' 
+    AND column_name LIKE 'embedding_%';
+    
+    SELECT COUNT(*) INTO code_examples_columns 
+    FROM information_schema.columns 
+    WHERE table_name = 'archon_code_examples' 
+    AND column_name LIKE 'embedding_%';
+    
+    -- Count new vector indexes
+    SELECT COUNT(*) INTO total_indexes 
+    FROM pg_indexes 
+    WHERE schemaname = 'public' 
+    AND indexname LIKE '%embedding_%';
+    
+    -- Count dynamic search functions
+    SELECT COUNT(*) INTO dynamic_functions 
+    FROM pg_proc p
+    JOIN pg_namespace n ON p.pronamespace = n.oid
+    WHERE n.nspname = 'public'
+    AND p.proname LIKE '%_dynamic';
+    
+    RAISE NOTICE '======================================================================';
+    RAISE NOTICE '              MULTI-DIMENSIONAL VECTORS UPGRADE COMPLETED';
+    RAISE NOTICE '======================================================================';
+    RAISE NOTICE 'Upgrade results:';
+    RAISE NOTICE '  - archon_crawled_pages embedding columns: %', crawled_pages_columns;
+    RAISE NOTICE '  - archon_code_examples embedding columns: %', code_examples_columns;
+    RAISE NOTICE '  - Multi-dimensional vector indexes: %', total_indexes;
+    RAISE NOTICE '  - Dynamic search functions: %', dynamic_functions;
+    RAISE NOTICE '';
+    RAISE NOTICE 'New capabilities:';
+    RAISE NOTICE '  âœ“ Support for 768, 1024, 1536, and 3072 dimension embeddings';
+    RAISE NOTICE '  âœ“ Optimized ivfflat indexes for all dimensions';
+    RAISE NOTICE '  âœ“ Dynamic search functions for dimension-specific queries';
+    RAISE NOTICE '  âœ“ Full backward compatibility with existing embeddings';
+    RAISE NOTICE '';
+    RAISE NOTICE 'Supported models:';
+    RAISE NOTICE '  - text-embedding-3-small (768, 1536 dims)';
+    RAISE NOTICE '  - text-embedding-3-large (3072 dims)';
+    RAISE NOTICE '  - text-embedding-ada-002 (1536 dims)';
+    RAISE NOTICE '  - Custom models (1024 dims)';
+    RAISE NOTICE '======================================================================';
+    
+END $$;
+
+COMMIT;
+
+-- =====================================================
+-- END OF UPGRADE SCRIPT
+-- =====================================================
\ No newline at end of file
-- 
2.39.5


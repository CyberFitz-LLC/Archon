From 280f67a343aeaecc29141bfe422231e8ab318d7f Mon Sep 17 00:00:00 2001
From: John Fitzpatrick <john@cyberfitz.org>
Date: Sat, 16 Aug 2025 00:14:22 -0700
Subject: [PATCH 34/38] refactor: Enhanced UI components and removed deprecated
 EmbeddingModelChanger
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

ðŸŽ¨ Frontend Improvements:
- Enhanced ModelSelectionModal with extended context window support
- Added support for min/max context window configuration
- Improved model specification interface with tool support indicators
- Enhanced provider integration and model discovery
- Updated SettingsPage to use consolidated model selection

ðŸ§¹ Code Cleanup:
- Removed deprecated EmbeddingModelChanger.tsx component
- Consolidated model selection functionality into unified modal
- Streamlined settings page architecture

These changes complement the database persistence and load balancing
implementation by providing better UI for managing multiple Ollama instances
and their model configurations.

ðŸ¤– Generated with Claude Code (https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>
---
 .../settings/EmbeddingModelChanger.tsx        | 386 ---------------
 .../settings/ModelSelectionModal.tsx          | 450 ++++++++++++++----
 archon-ui-main/src/pages/SettingsPage.tsx     |  12 -
 3 files changed, 360 insertions(+), 488 deletions(-)
 delete mode 100644 archon-ui-main/src/components/settings/EmbeddingModelChanger.tsx

diff --git a/archon-ui-main/src/components/settings/EmbeddingModelChanger.tsx b/archon-ui-main/src/components/settings/EmbeddingModelChanger.tsx
deleted file mode 100644
index af7d53b..0000000
--- a/archon-ui-main/src/components/settings/EmbeddingModelChanger.tsx
+++ /dev/null
@@ -1,386 +0,0 @@
-import React, { useState, useEffect } from 'react';
-import { AlertTriangle, Trash2, RefreshCw, CheckCircle, Info } from 'lucide-react';
-import { Card } from '../ui/Card';
-import { Button } from '../ui/Button';
-import { Input } from '../ui/Input';
-import { Select } from '../ui/Select';
-import { useToast } from '../../contexts/ToastContext';
-
-interface ModelRecommendation {
-  model_name: string;
-  provider: string;
-  dimensions: number;
-  description: string;
-  use_case: string;
-}
-
-interface ModelValidation {
-  is_valid: boolean;
-  is_change: boolean;
-  dimensions_change: boolean;
-  requires_migration: boolean;
-  data_loss_warning: boolean;
-  current: {
-    provider: string;
-    model: string;
-    dimensions: number;
-  };
-  new: {
-    provider: string;
-    model: string;
-    dimensions: number;
-  };
-  error?: string;
-}
-
-interface CurrentModelInfo {
-  provider: string;
-  model_name: string;
-  dimensions: number;
-  schema_dimensions: Record<string, number>;
-  embedding_counts: Record<string, number>;
-  total_embeddings: number;
-  schema_needs_migration: boolean;
-}
-
-export const EmbeddingModelChanger = () => {
-  const [recommendations, setRecommendations] = useState<ModelRecommendation[]>([]);
-  const [currentModel, setCurrentModel] = useState<CurrentModelInfo | null>(null);
-  const [selectedProvider, setSelectedProvider] = useState('');
-  const [selectedModel, setSelectedModel] = useState('');
-  const [validation, setValidation] = useState<ModelValidation | null>(null);
-  const [showWarning, setShowWarning] = useState(false);
-  const [confirmationText, setConfirmationText] = useState('');
-  const [isChanging, setIsChanging] = useState(false);
-  const [loading, setLoading] = useState(true);
-  const { showToast } = useToast();
-
-  const requiredConfirmation = "I understand this will permanently delete all embeddings";
-
-  useEffect(() => {
-    loadInitialData();
-  }, []);
-
-  const loadInitialData = async () => {
-    try {
-      setLoading(true);
-      
-      // Load recommendations and current model info in parallel
-      const [recsResponse, currentResponse] = await Promise.all([
-        fetch('/api/embedding-models/recommendations'),
-        fetch('/api/embedding-models/current')
-      ]);
-
-      if (recsResponse.ok) {
-        const recs = await recsResponse.json();
-        setRecommendations(recs);
-      }
-
-      if (currentResponse.ok) {
-        const current = await currentResponse.json();
-        setCurrentModel(current);
-        setSelectedProvider(current.provider);
-        setSelectedModel(current.model_name);
-      }
-    } catch (error) {
-      console.error('Failed to load initial data:', error);
-      showToast('Failed to load embedding model information', 'error');
-    } finally {
-      setLoading(false);
-    }
-  };
-
-  const validateModelChange = async () => {
-    if (!selectedProvider || !selectedModel) {
-      showToast('Please select a provider and model', 'error');
-      return;
-    }
-
-    try {
-      const response = await fetch('/api/embedding-models/validate', {
-        method: 'POST',
-        headers: { 'Content-Type': 'application/json' },
-        body: JSON.stringify({
-          provider: selectedProvider,
-          model_name: selectedModel
-        })
-      });
-
-      if (response.ok) {
-        const validationResult = await response.json();
-        setValidation(validationResult);
-        
-        if (validationResult.data_loss_warning) {
-          setShowWarning(true);
-        } else if (validationResult.is_change) {
-          // No data loss warning, proceed directly
-          await performModelChange();
-        } else {
-          showToast('Selected model is the same as current model', 'info');
-        }
-      } else {
-        showToast('Failed to validate model change', 'error');
-      }
-    } catch (error) {
-      console.error('Validation failed:', error);
-      showToast('Failed to validate model change', 'error');
-    }
-  };
-
-  const performModelChange = async () => {
-    try {
-      setIsChanging(true);
-      
-      const response = await fetch('/api/embedding-models/change', {
-        method: 'POST',
-        headers: { 'Content-Type': 'application/json' },
-        body: JSON.stringify({
-          provider: selectedProvider,
-          model_name: selectedModel
-        })
-      });
-
-      if (response.ok) {
-        const result = await response.json();
-        showToast('Embedding model changed successfully!', 'success');
-        
-        // Reset state
-        setShowWarning(false);
-        setConfirmationText('');
-        setValidation(null);
-        
-        // Reload current model info
-        await loadInitialData();
-      } else {
-        showToast('Failed to change embedding model', 'error');
-      }
-    } catch (error) {
-      console.error('Model change failed:', error);
-      showToast('Failed to change embedding model', 'error');
-    } finally {
-      setIsChanging(false);
-    }
-  };
-
-  const handleConfirmedChange = async () => {
-    if (confirmationText !== requiredConfirmation) {
-      showToast('Please enter the exact confirmation text', 'error');
-      return;
-    }
-    
-    await performModelChange();
-  };
-
-  const cancelChange = () => {
-    setShowWarning(false);
-    setConfirmationText('');
-    setValidation(null);
-  };
-
-  if (loading) {
-    return (
-      <Card accentColor="blue" className="p-6">
-        <div className="flex items-center justify-center py-8">
-          <RefreshCw className="w-6 h-6 animate-spin text-blue-500 mr-3" />
-          <span className="text-gray-600 dark:text-gray-300">Loading embedding model information...</span>
-        </div>
-      </Card>
-    );
-  }
-
-  // Group recommendations by provider for easier selection
-  const providerOptions = [...new Set(recommendations.map(r => r.provider))].map(provider => ({
-    value: provider,
-    label: provider.charAt(0).toUpperCase() + provider.slice(1)
-  }));
-
-  const modelOptions = recommendations
-    .filter(r => r.provider === selectedProvider)
-    .map(r => ({
-      value: r.model_name,
-      label: `${r.model_name} (${r.dimensions}d)`
-    }));
-
-  const selectedModelInfo = recommendations.find(
-    r => r.provider === selectedProvider && r.model_name === selectedModel
-  );
-
-  return (
-    <div className="space-y-6">
-      <Card accentColor="blue" className="p-6">
-        <div className="flex items-center mb-4">
-          <CheckCircle className="mr-2 text-blue-500 filter drop-shadow-[0_0_8px_rgba(59,130,246,0.8)]" size={20} />
-          <h2 className="text-xl font-semibold text-gray-800 dark:text-white">
-            Embedding Model Manager
-          </h2>
-        </div>
-
-        <p className="text-sm text-gray-600 dark:text-zinc-400 mb-6">
-          Manage your embedding model configuration. Changing models with different dimensions will require re-embedding existing content.
-        </p>
-
-        {currentModel && (
-          <div className="bg-blue-500/5 border border-blue-500/20 rounded-lg p-4 mb-6">
-            <h3 className="font-medium text-gray-800 dark:text-white mb-2">Current Model</h3>
-            <div className="grid grid-cols-2 gap-4 text-sm">
-              <div>
-                <span className="text-gray-600 dark:text-gray-400">Provider:</span>
-                <span className="ml-2 font-medium text-gray-800 dark:text-white">
-                  {currentModel.provider.charAt(0).toUpperCase() + currentModel.provider.slice(1)}
-                </span>
-              </div>
-              <div>
-                <span className="text-gray-600 dark:text-gray-400">Model:</span>
-                <span className="ml-2 font-medium text-gray-800 dark:text-white">
-                  {currentModel.model_name}
-                </span>
-              </div>
-              <div>
-                <span className="text-gray-600 dark:text-gray-400">Dimensions:</span>
-                <span className="ml-2 font-medium text-gray-800 dark:text-white">
-                  {currentModel.dimensions}
-                </span>
-              </div>
-              <div>
-                <span className="text-gray-600 dark:text-gray-400">Total Embeddings:</span>
-                <span className="ml-2 font-medium text-gray-800 dark:text-white">
-                  {currentModel.total_embeddings.toLocaleString()}
-                </span>
-              </div>
-            </div>
-          </div>
-        )}
-
-        <div className="grid grid-cols-2 gap-4 mb-6">
-          <div>
-            <Select
-              label="Provider"
-              value={selectedProvider}
-              onChange={(e) => {
-                setSelectedProvider(e.target.value);
-                setSelectedModel(''); // Reset model when provider changes
-              }}
-              options={providerOptions}
-              accentColor="blue"
-            />
-          </div>
-          <div>
-            <Select
-              label="Model"
-              value={selectedModel}
-              onChange={(e) => setSelectedModel(e.target.value)}
-              options={modelOptions}
-              accentColor="blue"
-              disabled={!selectedProvider}
-            />
-          </div>
-        </div>
-
-        {selectedModelInfo && (
-          <div className="bg-gray-50 dark:bg-gray-800/50 rounded-lg p-4 mb-6">
-            <h4 className="font-medium text-gray-800 dark:text-white mb-2">
-              {selectedModelInfo.model_name}
-            </h4>
-            <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
-              {selectedModelInfo.description}
-            </p>
-            <p className="text-xs text-gray-500 dark:text-gray-500">
-              <strong>Use case:</strong> {selectedModelInfo.use_case}
-            </p>
-            <p className="text-xs text-gray-500 dark:text-gray-500">
-              <strong>Dimensions:</strong> {selectedModelInfo.dimensions}
-            </p>
-          </div>
-        )}
-
-        <div className="flex justify-end">
-          <Button
-            onClick={validateModelChange}
-            disabled={!selectedProvider || !selectedModel}
-            accentColor="blue"
-            className="px-6"
-          >
-            Change Model
-          </Button>
-        </div>
-      </Card>
-
-      {showWarning && validation && (
-        <Card accentColor="red" className="p-6">
-          <div className="flex items-center mb-4">
-            <AlertTriangle className="mr-2 text-red-500 filter drop-shadow-[0_0_8px_rgba(239,68,68,0.8)]" size={20} />
-            <h3 className="text-lg font-semibold text-red-800 dark:text-red-300">
-              Warning: Data Loss Risk
-            </h3>
-          </div>
-
-          <div className="space-y-4">
-            <p className="text-sm text-red-700 dark:text-red-300">
-              Changing from <strong>{validation.current.model}</strong> ({validation.current.dimensions}d) 
-              to <strong>{validation.new.model}</strong> ({validation.new.dimensions}d) will:
-            </p>
-
-            <ul className="list-disc pl-6 space-y-1 text-sm text-red-700 dark:text-red-300">
-              {validation.dimensions_change && (
-                <li>Change vector dimensions from {validation.current.dimensions} to {validation.new.dimensions}</li>
-              )}
-              {validation.requires_migration && (
-                <li>Delete all existing embeddings ({currentModel?.total_embeddings.toLocaleString()} items)</li>
-              )}
-              <li>Require re-embedding of all content (this may take time and cost money)</li>
-              <li>Temporarily reduce search quality until re-embedding is complete</li>
-            </ul>
-
-            <div className="bg-red-500/10 border border-red-500/20 rounded-lg p-4">
-              <div className="flex items-start">
-                <Info className="w-4 h-4 text-red-500 mr-2 mt-0.5 flex-shrink-0" />
-                <div>
-                  <p className="text-sm text-red-700 dark:text-red-300 font-medium mb-1">
-                    This action cannot be undone
-                  </p>
-                  <p className="text-xs text-red-600 dark:text-red-400">
-                    Please ensure you have a backup if you want to revert this change.
-                  </p>
-                </div>
-              </div>
-            </div>
-
-            <div>
-              <label className="block text-sm font-medium text-red-700 dark:text-red-300 mb-2">
-                Type the following text to confirm:
-              </label>
-              <Input
-                value={confirmationText}
-                onChange={(e) => setConfirmationText(e.target.value)}
-                placeholder={requiredConfirmation}
-                className="mb-4"
-                accentColor="red"
-              />
-              <p className="text-xs text-red-600 dark:text-red-400">
-                Required: "{requiredConfirmation}"
-              </p>
-            </div>
-
-            <div className="flex justify-end space-x-3">
-              <Button
-                onClick={cancelChange}
-                variant="outline"
-                accentColor="gray"
-              >
-                Cancel
-              </Button>
-              <Button
-                onClick={handleConfirmedChange}
-                disabled={confirmationText !== requiredConfirmation || isChanging}
-                accentColor="red"
-                icon={isChanging ? <RefreshCw className="w-4 h-4 animate-spin" /> : <Trash2 className="w-4 h-4" />}
-              >
-                {isChanging ? 'Changing Model...' : 'Confirm Change'}
-              </Button>
-            </div>
-          </div>
-        </Card>
-      )}
-    </div>
-  );
-};
\ No newline at end of file
diff --git a/archon-ui-main/src/components/settings/ModelSelectionModal.tsx b/archon-ui-main/src/components/settings/ModelSelectionModal.tsx
index dede2b0..c0737b9 100644
--- a/archon-ui-main/src/components/settings/ModelSelectionModal.tsx
+++ b/archon-ui-main/src/components/settings/ModelSelectionModal.tsx
@@ -1,5 +1,5 @@
 import React, { useState, useEffect, useMemo } from 'react';
-import { X, Search, Activity, Cpu, Database, Zap, Clock, Star, Download, Loader } from 'lucide-react';
+import { X, Search, Activity, Cpu, Database, Zap, Clock, Star, Download, Loader, Server } from 'lucide-react';
 import { motion, AnimatePresence } from 'framer-motion';
 import { createPortal } from 'react-dom';
 import { Button } from '../ui/Button';
@@ -14,7 +14,9 @@ export interface ModelSpec {
   provider: Provider;
   type: 'chat' | 'embedding' | 'vision';
   description?: string;
-  contextWindow?: number;
+  contextWindow?: number; // Default/current context window
+  maxContextWindow?: number; // Maximum supported context window
+  minContextWindow?: number; // Minimum context window
   recommended?: boolean;
   dimensions?: number;
   toolSupport?: boolean;
@@ -28,6 +30,12 @@ export interface ModelSpec {
     host: string;
     family?: string;
     size_gb?: number;
+    context_window?: number; // Default context window from API
+    max_context_window?: number; // Maximum context window from API
+    min_context_window?: number; // Minimum context window from API
+    supports_tools?: boolean;
+    supports_thinking?: boolean;
+    embedding_dimensions?: number;
   };
   pricing?: {
     input: number;
@@ -60,6 +68,8 @@ const getMockModels = (provider: Provider): ModelSpec[] => {
         type: 'chat',
         description: 'Most capable GPT-4 model with improved instruction following',
         contextWindow: 128000,
+        maxContextWindow: 128000,
+        minContextWindow: 1024,
         recommended: true,
         toolSupport: true,
         performance: { speed: 'medium', quality: 'high' },
@@ -76,6 +86,8 @@ const getMockModels = (provider: Provider): ModelSpec[] => {
         type: 'chat',
         description: 'High-quality reasoning and complex instruction following',
         contextWindow: 8192,
+        maxContextWindow: 8192,
+        minContextWindow: 1024,
         toolSupport: true,
         performance: { speed: 'slow', quality: 'high' },
         capabilities: ['Text Generation', 'Function Calling'],
@@ -91,6 +103,8 @@ const getMockModels = (provider: Provider): ModelSpec[] => {
         type: 'embedding',
         description: 'Most capable embedding model for semantic search',
         contextWindow: 8191,
+        maxContextWindow: 8191,
+        minContextWindow: 512,
         dimensions: 3072,
         recommended: true,
         performance: { speed: 'fast', quality: 'high' },
@@ -107,6 +121,8 @@ const getMockModels = (provider: Provider): ModelSpec[] => {
         type: 'embedding',
         description: 'Efficient embedding model for most use cases',
         contextWindow: 8191,
+        maxContextWindow: 8191,
+        minContextWindow: 512,
         dimensions: 1536,
         performance: { speed: 'fast', quality: 'medium' },
         capabilities: ['Text Embeddings'],
@@ -123,7 +139,9 @@ const getMockModels = (provider: Provider): ModelSpec[] => {
         provider: 'google',
         type: 'chat',
         description: 'Google\'s most capable multimodal model',
-        contextWindow: 2000000,
+        contextWindow: 1000000,
+        maxContextWindow: 2000000,
+        minContextWindow: 1024,
         recommended: true,
         toolSupport: true,
         performance: { speed: 'medium', quality: 'high' },
@@ -139,6 +157,8 @@ const getMockModels = (provider: Provider): ModelSpec[] => {
         type: 'chat',
         description: 'Fast and efficient with good performance',
         contextWindow: 1000000,
+        maxContextWindow: 1000000,
+        minContextWindow: 1024,
         toolSupport: true,
         performance: { speed: 'fast', quality: 'medium' },
         capabilities: ['Text Generation', 'Function Calling'],
@@ -156,6 +176,8 @@ const getMockModels = (provider: Provider): ModelSpec[] => {
         type: 'chat',
         description: 'Anthropic\'s most intelligent model',
         contextWindow: 200000,
+        maxContextWindow: 200000,
+        minContextWindow: 1024,
         recommended: true,
         toolSupport: true,
         performance: { speed: 'medium', quality: 'high' },
@@ -171,6 +193,8 @@ const getMockModels = (provider: Provider): ModelSpec[] => {
         type: 'chat',
         description: 'Fast and cost-effective for lighter tasks',
         contextWindow: 200000,
+        maxContextWindow: 200000,
+        minContextWindow: 1024,
         toolSupport: true,
         performance: { speed: 'fast', quality: 'medium' },
         capabilities: ['Text Generation', 'Function Calling'],
@@ -274,60 +298,103 @@ export const ModelSelectionModal: React.FC<ModelSelectionModalProps> = ({
           
           // Convert Ollama models to ModelSpec format with enhanced details
           const allOllamaModels = [
-            ...discoveryData.chat_models.map((model: any) => ({
-              id: `${model.name}@${model.host}`,
-              name: model.name,
-              displayName: `${model.name} (${new URL(model.host).hostname})`,
-              provider: 'ollama' as Provider,
-              type: 'chat' as const,
-              contextWindow: model.context_window,
-              toolSupport: model.supports_tools,
-              performance: { speed: 'medium', quality: 'high' },
-              capabilities: [
-                'Text Generation', 
-                'Local Processing',
-                ...(model.supports_tools ? ['Function Calling'] : []),
-                ...(model.supports_thinking ? ['Thinking'] : [])
-              ],
-              useCase: ['Local AI', 'Privacy', 'Offline Processing'],
-              status: 'available' as const,
-              description: `${model.family || 'Ollama'} model running on ${new URL(model.host).hostname}`,
-              size_gb: model.size_gb,
-              family: model.family,
-              hostInfo: {
-                host: model.host,
-                family: model.family,
+            ...discoveryData.chat_models.map((model: any) => {
+              // Enhanced context window calculation
+              const defaultContext = model.context_window || 4096;
+              const getContextWindowLimits = (contextWindow: number, modelName: string) => {
+                const name = modelName.toLowerCase();
+                let minContext = 1024; // Standard minimum
+                let maxContext = contextWindow;
+                
+                // Estimate max context based on model capabilities
+                if (name.includes('llama3') || name.includes('llama-3')) {
+                  maxContext = Math.max(contextWindow, 8192);
+                } else if (name.includes('qwen')) {
+                  maxContext = Math.max(contextWindow, 32768);
+                } else if (name.includes('mistral')) {
+                  maxContext = Math.max(contextWindow, 32768);
+                } else if (name.includes('gemma')) {
+                  maxContext = Math.max(contextWindow, 8192);
+                } else if (name.includes('phi')) {
+                  maxContext = Math.max(contextWindow, 4096);
+                } else {
+                  // For unknown models, assume some expandability
+                  maxContext = Math.max(contextWindow, contextWindow * 2);
+                }
+                
+                return { minContext, maxContext };
+              };
+              
+              const { minContext, maxContext } = getContextWindowLimits(defaultContext, model.name);
+              
+              return {
+                id: `${model.name}@${model.host}`,
+                name: model.name,
+                displayName: model.name,
+                provider: 'ollama' as Provider,
+                type: 'chat' as const,
+                contextWindow: defaultContext,
+                maxContextWindow: maxContext,
+                minContextWindow: minContext,
+                toolSupport: model.supports_tools,
+                performance: { speed: 'medium', quality: 'high' },
+                capabilities: [
+                  'Text Generation', 
+                  'Local Processing',
+                  ...(model.supports_tools ? ['Function Calling'] : []),
+                  ...(model.supports_thinking ? ['Thinking'] : [])
+                ],
+                useCase: ['Local AI', 'Privacy', 'Offline Processing'],
+                status: 'available' as const,
+                description: `${model.family || 'Ollama'} model running on ${new URL(model.host).hostname}`,
                 size_gb: model.size_gb,
-                context_window: model.context_window,
-                supports_tools: model.supports_tools,
-                supports_thinking: model.supports_thinking,
-              },
-            })),
-            ...discoveryData.embedding_models.map((model: any) => ({
-              id: `${model.name}@${model.host}`,
-              name: model.name,
-              displayName: `${model.name} (${new URL(model.host).hostname})`,
-              provider: 'ollama' as Provider,
-              type: 'embedding' as const,
-              contextWindow: model.context_window,
-              dimensions: model.embedding_dimensions,
-              toolSupport: false,
-              performance: { speed: 'fast', quality: 'medium' },
-              capabilities: ['Text Embeddings', 'Local Processing', 'Semantic Search'],
-              useCase: ['Private Search', 'Local RAG', 'Offline Embeddings'],
-              status: 'available' as const,
-              description: `${model.family || 'Embedding'} model (${model.embedding_dimensions}D) on ${new URL(model.host).hostname}`,
-              size_gb: model.size_gb,
-              family: model.family,
-              dimensions: model.embedding_dimensions,
-              hostInfo: {
-                host: model.host,
                 family: model.family,
+                hostInfo: {
+                  host: model.host,
+                  family: model.family,
+                  size_gb: model.size_gb,
+                  context_window: defaultContext,
+                  max_context_window: maxContext,
+                  min_context_window: minContext,
+                  supports_tools: model.supports_tools,
+                  supports_thinking: model.supports_thinking,
+                },
+              };
+            }),
+            ...discoveryData.embedding_models.map((model: any) => {
+              const defaultContext = model.context_window || 512;
+              const maxContext = Math.max(defaultContext, 2048); // Embedding models typically have smaller context windows
+              const minContext = 128;
+              
+              return {
+                id: `${model.name}@${model.host}`,
+                name: model.name,
+                displayName: model.name,
+                provider: 'ollama' as Provider,
+                type: 'embedding' as const,
+                contextWindow: defaultContext,
+                maxContextWindow: maxContext,
+                minContextWindow: minContext,
+                dimensions: model.embedding_dimensions,
+                toolSupport: false,
+                performance: { speed: 'fast', quality: 'medium' },
+                capabilities: ['Text Embeddings', 'Local Processing', 'Semantic Search'],
+                useCase: ['Private Search', 'Local RAG', 'Offline Embeddings'],
+                status: 'available' as const,
+                description: `${model.family || 'Embedding'} model (${model.embedding_dimensions}D) on ${new URL(model.host).hostname}`,
                 size_gb: model.size_gb,
-                context_window: model.context_window,
-                embedding_dimensions: model.embedding_dimensions,
-              },
-            })),
+                family: model.family,
+                hostInfo: {
+                  host: model.host,
+                  family: model.family,
+                  size_gb: model.size_gb,
+                  context_window: defaultContext,
+                  max_context_window: maxContext,
+                  min_context_window: minContext,
+                  embedding_dimensions: model.embedding_dimensions,
+                },
+              };
+            }),
           ];
 
           setModels(allOllamaModels);
@@ -351,6 +418,79 @@ export const ModelSelectionModal: React.FC<ModelSelectionModalProps> = ({
     setRefreshKey(prev => prev + 1);
   };
 
+  // Helper function to get embedding-specific use case tags based on dimensions
+  const getEmbeddingUseCaseTags = (dimensions: number, modelName: string) => {
+    const tags: string[] = [];
+    
+    // Dimension-based tags
+    if (dimensions > 2000) {
+      tags.push('High Precision', 'Complex Queries');
+    } else if (dimensions >= 1000) {
+      tags.push('Balanced', 'General Purpose');
+    } else {
+      tags.push('Fast', 'Resource Efficient');
+    }
+    
+    // Model family-specific tags
+    const name = modelName.toLowerCase();
+    if (name.includes('all-minilm')) {
+      tags.push('Semantic Search', 'Document Similarity');
+    } else if (name.includes('all-mpnet')) {
+      tags.push('RAG', 'High Quality');
+    } else if (name.includes('bge') || name.includes('gte')) {
+      tags.push('Multilingual', 'Code Search');
+    } else if (name.includes('e5')) {
+      tags.push('Text Retrieval', 'Cross-lingual');
+    } else if (name.includes('instructor')) {
+      tags.push('Instruction-based', 'Versatile');
+    } else if (name.includes('nomic')) {
+      tags.push('Variable Length', 'Flexible');
+    } else {
+      // Generic embedding tags
+      tags.push('Semantic Search', 'RAG');
+    }
+    
+    return tags;
+  };
+
+  // Helper function to get support level colors
+  const getSupportColor = (supported: boolean | undefined, level: 'full' | 'partial' | 'none' = supported === true ? 'full' : 'none') => {
+    switch (level) {
+      case 'full':
+        return 'text-green-400 border-green-500/30 bg-green-500/10';
+      case 'partial':
+        return 'text-yellow-400 border-yellow-500/30 bg-yellow-500/10';
+      case 'none':
+      default:
+        return 'text-gray-400 border-gray-500/30 bg-gray-500/10';
+    }
+  };
+
+  // Helper function to get performance colors
+  const getPerformanceColor = (value: string, type: 'speed' | 'quality') => {
+    if (type === 'speed') {
+      switch (value) {
+        case 'fast': return 'text-green-400';
+        case 'medium': return 'text-yellow-400';
+        case 'slow': return 'text-red-400';
+        default: return 'text-gray-400';
+      }
+    } else { // quality
+      switch (value) {
+        case 'high': return 'text-green-400';
+        case 'medium': return 'text-yellow-400';
+        case 'low': return 'text-red-400';
+        default: return 'text-gray-400';
+      }
+    }
+  };
+
+  // Helper function to render support indicator dot
+  const SupportDot = ({ supported, level = supported === true ? 'full' : 'none' }: { supported: boolean | undefined, level?: 'full' | 'partial' | 'none' }) => {
+    const colorClass = level === 'full' ? 'bg-green-400' : level === 'partial' ? 'bg-yellow-400' : 'bg-gray-500';
+    return <div className={`w-2 h-2 rounded-full ${colorClass}`} />;
+  };
+
   // Filter and sort models
   const filteredAndSortedModels = useMemo(() => {
     let filtered = models.filter(model => {
@@ -595,8 +735,8 @@ export const ModelSelectionModal: React.FC<ModelSelectionModalProps> = ({
                   <div className="p-5">
                     {/* Header */}
                     <div className="flex items-start justify-between mb-3">
-                      <div className="flex-1">
-                        <h3 className="font-bold text-lg text-white mb-1 line-clamp-1">
+                      <div className="flex-1 min-w-0">
+                        <h3 className="font-bold text-lg text-white mb-1 line-clamp-3 leading-tight">
                           {model.displayName}
                         </h3>
                         <div className="flex items-center gap-2 mb-2">
@@ -610,66 +750,178 @@ export const ModelSelectionModal: React.FC<ModelSelectionModalProps> = ({
                           >
                             {model.type}
                           </Badge>
-                          {model.hostInfo?.host && (
-                            <Badge variant="outline" className="text-xs border-orange-500/30 text-orange-400">
-                              {new URL(model.hostInfo.host).hostname}
-                            </Badge>
-                          )}
                         </div>
                       </div>
                     </div>
 
                     {/* Description */}
                     {model.description && (
-                      <p className="text-sm text-gray-400 mb-4 line-clamp-2">
+                      <p className="text-sm text-gray-400 mb-4 line-clamp-2 leading-relaxed">
                         {model.description}
                       </p>
                     )}
 
-                    {/* Specs */}
+                    {/* Host Information */}
+                    {model.hostInfo?.host && (
+                      <div className="mb-4 p-3 bg-gray-800/30 border border-gray-700/50 rounded-lg">
+                        <div className="flex items-center gap-2 text-sm">
+                          <Server className="w-4 h-4 text-orange-400" />
+                          <span className="text-gray-300 font-medium">Host:</span>
+                          <span className="text-orange-400">{new URL(model.hostInfo.host).hostname}</span>
+                        </div>
+                      </div>
+                    )}
+
+                    {/* Support Indicators */}
+                    <div className="mb-4 space-y-2">
+                      <div className="grid grid-cols-2 gap-2 text-xs">
+                        {/* Tool Support */}
+                        {(model.toolSupport !== undefined || model.hostInfo?.supports_tools !== undefined) && (
+                          <div className={`flex items-center gap-2 px-2 py-1 rounded border ${getSupportColor(model.toolSupport || model.hostInfo?.supports_tools)}`}>
+                            <SupportDot supported={model.toolSupport || model.hostInfo?.supports_tools} />
+                            <span className="font-medium">Tools</span>
+                          </div>
+                        )}
+
+                        {/* Thinking Support */}
+                        {model.hostInfo?.supports_thinking !== undefined && (
+                          <div className={`flex items-center gap-2 px-2 py-1 rounded border ${getSupportColor(model.hostInfo.supports_thinking)}`}>
+                            <SupportDot supported={model.hostInfo.supports_thinking} />
+                            <span className="font-medium">Thinking</span>
+                          </div>
+                        )}
+
+                        {/* Vision Support - check capabilities for vision models */}
+                        {(model.type === 'vision' || model.capabilities?.includes('Vision')) && (
+                          <div className={`flex items-center gap-2 px-2 py-1 rounded border ${getSupportColor(model.capabilities?.includes('Vision'))}`}>
+                            <SupportDot supported={model.capabilities?.includes('Vision')} />
+                            <span className="font-medium">Vision</span>
+                          </div>
+                        )}
+                      </div>
+                    </div>
+
+                    {/* Specs - Conditional Display for Embedding vs Chat Models */}
                     <div className="space-y-3">
                       <div className="grid grid-cols-2 gap-3 text-xs">
-                        {model.contextWindow && (
-                          <div className="flex items-center gap-1 text-cyan-400">
+                        {/* For Chat Models - Show Context Window */}
+                        {model.type === 'chat' && model.contextWindow && (
+                          <div className="flex items-center gap-1 text-cyan-400 col-span-2">
                             <Cpu className="w-3 h-3" />
-                            <span>{model.contextWindow.toLocaleString()} tokens</span>
-                          </div>
-                        )}
-                        {model.dimensions && (
-                          <div className="flex items-center gap-1 text-purple-400">
-                            <Database className="w-3 h-3" />
-                            <span>{model.dimensions}D</span>
+                            <span className="font-medium">
+                              Context: {(() => {
+                                const current = model.contextWindow || 0;
+                                const max = model.maxContextWindow || current;
+                                const min = model.minContextWindow || Math.min(current, 1024);
+                                
+                                // If all values are the same, show simple format
+                                if (current === max && current === min) {
+                                  return `${current.toLocaleString()} tokens`;
+                                }
+                                
+                                // If current and max are same but different from min
+                                if (current === max) {
+                                  return `${current.toLocaleString()} tokens (max)`;
+                                }
+                                
+                                // Full format showing all three values
+                                const formatNumber = (num: number) => {
+                                  if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;
+                                  if (num >= 1000) return `${Math.round(num / 1000)}K`;
+                                  return num.toString();
+                                };
+                                
+                                return `${formatNumber(current)} (default) / ${formatNumber(max)} (max)`;
+                              })()}
+                            </span>
                           </div>
                         )}
-                        {model.performance && (
-                          <div className="flex items-center gap-1 text-green-400">
-                            <Zap className="w-3 h-3" />
-                            <span>{model.performance.speed}</span>
+
+                        {/* For Embedding Models - Show Dimensions Prominently */}
+                        {model.type === 'embedding' && model.dimensions && (
+                          <div className="flex items-center gap-1 text-purple-400 col-span-2">
+                            <Database className="w-4 h-4" />
+                            <span className="font-semibold text-base">
+                              {model.dimensions} dimensions
+                            </span>
                           </div>
                         )}
+
+                        {/* Model Size in GB (for all models) */}
                         {model.size_gb && (
                           <div className="flex items-center gap-1 text-orange-400">
                             <Download className="w-3 h-3" />
                             <span>{model.size_gb}GB</span>
                           </div>
                         )}
+
+                        {/* Performance indicators (for all models) */}
+                        {model.performance && (
+                          <>
+                            <div className={`flex items-center gap-1 ${getPerformanceColor(model.performance.speed, 'speed')}`}>
+                              <Zap className="w-3 h-3" />
+                              <span>Speed: {model.performance.speed}</span>
+                            </div>
+                            <div className={`flex items-center gap-1 ${getPerformanceColor(model.performance.quality, 'quality')}`}>
+                              <Clock className="w-3 h-3" />
+                              <span>Quality: {model.performance.quality}</span>
+                            </div>
+                          </>
+                        )}
                       </div>
 
-                      {/* Capabilities */}
+                      {/* Capabilities - Enhanced for Embedding Models */}
                       {model.capabilities && model.capabilities.length > 0 && (
                         <div className="flex flex-wrap gap-1">
-                          {model.capabilities.slice(0, 3).map((cap, index) => (
-                            <Badge
-                              key={index}
-                              variant="outline"
-                              className="text-xs bg-gray-700/50 border-gray-600 text-gray-300"
-                            >
-                              {cap}
-                            </Badge>
-                          ))}
-                          {model.capabilities.length > 3 && (
+                          {/* For embedding models, show dimension-based and specialized tags */}
+                          {model.type === 'embedding' && model.dimensions ? (
+                            getEmbeddingUseCaseTags(model.dimensions, model.displayName).slice(0, 4).map((tag, index) => {
+                              // Color code embedding-specific capabilities
+                              let capColorClass = "text-gray-300 border-gray-600 bg-gray-700/50";
+                              if (tag === 'High Precision' || tag === 'High Quality') capColorClass = "text-green-300 border-green-600/30 bg-green-700/20";
+                              else if (tag === 'Fast' || tag === 'Resource Efficient') capColorClass = "text-blue-300 border-blue-600/30 bg-blue-700/20";
+                              else if (tag === 'Semantic Search' || tag === 'RAG') capColorClass = "text-purple-300 border-purple-600/30 bg-purple-700/20";
+                              else if (tag === 'Code Search' || tag === 'Multilingual') capColorClass = "text-orange-300 border-orange-600/30 bg-orange-700/20";
+                              else if (tag === 'Balanced' || tag === 'General Purpose') capColorClass = "text-yellow-300 border-yellow-600/30 bg-yellow-700/20";
+                              
+                              return (
+                                <Badge
+                                  key={index}
+                                  variant="outline"
+                                  className={`text-xs ${capColorClass}`}
+                                >
+                                  {tag}
+                                </Badge>
+                              );
+                            })
+                          ) : (
+                            /* For non-embedding models, show regular capabilities */
+                            model.capabilities.slice(0, 3).map((cap, index) => {
+                              // Color code capabilities based on type
+                              let capColorClass = "text-gray-300 border-gray-600 bg-gray-700/50";
+                              if (cap === 'Function Calling') capColorClass = "text-green-300 border-green-600/30 bg-green-700/20";
+                              else if (cap === 'Thinking') capColorClass = "text-blue-300 border-blue-600/30 bg-blue-700/20";
+                              else if (cap === 'Vision') capColorClass = "text-purple-300 border-purple-600/30 bg-purple-700/20";
+                              else if (cap === 'Local Processing') capColorClass = "text-orange-300 border-orange-600/30 bg-orange-700/20";
+                              
+                              return (
+                                <Badge
+                                  key={index}
+                                  variant="outline"
+                                  className={`text-xs ${capColorClass}`}
+                                >
+                                  {cap}
+                                </Badge>
+                              );
+                            })
+                          )}
+                          {/* Show overflow indicator if there are more capabilities/tags */}
+                          {((model.type === 'embedding' && model.dimensions && getEmbeddingUseCaseTags(model.dimensions, model.displayName).length > 4) ||
+                            (model.type !== 'embedding' && model.capabilities.length > 3)) && (
                             <Badge variant="outline" className="text-xs bg-gray-700/50 border-gray-600 text-gray-300">
-                              +{model.capabilities.length - 3}
+                              +{model.type === 'embedding' && model.dimensions 
+                                ? getEmbeddingUseCaseTags(model.dimensions, model.displayName).length - 4
+                                : model.capabilities.length - 3}
                             </Badge>
                           )}
                         </div>
@@ -705,13 +957,31 @@ export const ModelSelectionModal: React.FC<ModelSelectionModalProps> = ({
             {filteredAndSortedModels.length} model{filteredAndSortedModels.length !== 1 ? 's' : ''} available
           </div>
           <div className="flex gap-3">
-            <Button variant="outline" onClick={onClose}>
+            <Button
+              variant="outline"
+              onClick={onClose}
+              className="border-gray-600 text-gray-300 hover:bg-gray-800"
+            >
               Cancel
             </Button>
+            <Button
+              onClick={() => selectedModelId && onSelectModel(filteredAndSortedModels.find(m => m.id === selectedModelId)!)}
+              disabled={!selectedModelId || loading}
+              className="bg-blue-600 hover:bg-blue-700 text-white"
+            >
+              {loading ? (
+                <>
+                  <Loader className="w-4 h-4 animate-spin mr-2" />
+                  Selecting...
+                </>
+              ) : (
+                'Select Model'
+              )}
+            </Button>
           </div>
         </div>
       </motion.div>
     </motion.div>,
     document.body
   );
-};
\ No newline at end of file
+};
diff --git a/archon-ui-main/src/pages/SettingsPage.tsx b/archon-ui-main/src/pages/SettingsPage.tsx
index 3acaf32..418c2b5 100644
--- a/archon-ui-main/src/pages/SettingsPage.tsx
+++ b/archon-ui-main/src/pages/SettingsPage.tsx
@@ -7,7 +7,6 @@ import { useStaggeredEntrance } from '../hooks/useStaggeredEntrance';
 import { FeaturesSection } from '../components/settings/FeaturesSection';
 import { APIKeysSection } from '../components/settings/APIKeysSection';
 import { RAGSettings } from '../components/settings/RAGSettings';
-import { EmbeddingModelChanger } from '../components/settings/EmbeddingModelChanger';
 import { CodeExtractionSettings } from '../components/settings/CodeExtractionSettings';
 import { TestStatus } from '../components/settings/TestStatus';
 import { IDEGlobalRules } from '../components/settings/IDEGlobalRules';
@@ -219,17 +218,6 @@ export const SettingsPage = () => {
               <RAGSettings ragSettings={ragSettings} setRagSettings={setRagSettings} />
             </CollapsibleSettingsCard>
           </motion.div>
-          <motion.div variants={itemVariants}>
-            <CollapsibleSettingsCard
-              title="Embedding Models"
-              icon={Brain}
-              accentColor="blue"
-              storageKey="embedding-models"
-              defaultExpanded={false}
-            >
-              <EmbeddingModelChanger />
-            </CollapsibleSettingsCard>
-          </motion.div>
           <motion.div variants={itemVariants}>
             <CollapsibleSettingsCard
               title="Code Extraction"
-- 
2.39.5


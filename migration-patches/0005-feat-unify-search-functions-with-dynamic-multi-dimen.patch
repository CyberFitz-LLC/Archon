From f1070746c43309021f2bd457abf1639da909d1d3 Mon Sep 17 00:00:00 2001
From: John Fitzpatrick <john@cyberfitz.org>
Date: Sun, 10 Aug 2025 09:30:29 -0700
Subject: [PATCH 05/38] feat: unify search functions with dynamic
 multi-dimensional logic
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Replace original search functions with polymorphic versions that auto-detect
embedding dimensions and route to appropriate columns. This eliminates the
need for separate _dynamic functions while maintaining full backward compatibility.

Key changes:
- match_archon_crawled_pages: Now supports 768/1024/1536/3072 dimensions
- match_archon_code_examples: Same dynamic dimension detection
- Auto-detection via array_length() with intelligent type casting
- Removed duplicate _dynamic functions to simplify maintenance
- Updated all migration scripts consistently
- Maintained identical function signatures for backward compatibility

Benefits:
- Single set of functions instead of duplicates
- No code changes needed in existing applications
- Cleaner database schema and maintenance
- Better error messages for unsupported dimensions

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>
---
 migration/RESET_DB.sql                        |   4 +-
 migration/complete_setup.sql                  | 298 ++++++----------
 .../upgrade_multi_dimensional_vectors.sql     | 326 +++++++-----------
 3 files changed, 233 insertions(+), 395 deletions(-)

diff --git a/migration/RESET_DB.sql b/migration/RESET_DB.sql
index b481a00..7b1fd04 100644
--- a/migration/RESET_DB.sql
+++ b/migration/RESET_DB.sql
@@ -133,9 +133,7 @@ BEGIN
     DROP FUNCTION IF EXISTS match_archon_crawled_pages(vector, int, jsonb, text) CASCADE;
     DROP FUNCTION IF EXISTS match_archon_code_examples(vector, int, jsonb, text) CASCADE;
     
-    -- Multi-dimensional search functions
-    DROP FUNCTION IF EXISTS match_archon_crawled_pages_dynamic(vector, vector, vector, vector, int, jsonb, text) CASCADE;
-    DROP FUNCTION IF EXISTS match_archon_code_examples_dynamic(vector, vector, vector, vector, int, jsonb, text) CASCADE;
+
     
     -- Search functions (old without prefix)
     DROP FUNCTION IF EXISTS match_crawled_pages(vector, int, jsonb, text) CASCADE;
diff --git a/migration/complete_setup.sql b/migration/complete_setup.sql
index 819d406..ad9ad26 100644
--- a/migration/complete_setup.sql
+++ b/migration/complete_setup.sql
@@ -282,88 +282,9 @@ WITH (lists = 1000);
 -- SECTION 5: SEARCH FUNCTIONS
 -- =====================================================
 
--- Create a function to search for documentation chunks
+-- Create a function to search for documentation chunks (supports multi-dimensional embeddings)
 CREATE OR REPLACE FUNCTION match_archon_crawled_pages (
-  query_embedding VECTOR(1536),
-  match_count INT DEFAULT 10,
-  filter JSONB DEFAULT '{}'::jsonb,
-  source_filter TEXT DEFAULT NULL
-) RETURNS TABLE (
-  id BIGINT,
-  url VARCHAR,
-  chunk_number INTEGER,
-  content TEXT,
-  metadata JSONB,
-  source_id TEXT,
-  similarity FLOAT
-)
-LANGUAGE plpgsql
-AS $$
-#variable_conflict use_column
-BEGIN
-  RETURN QUERY
-  SELECT
-    id,
-    url,
-    chunk_number,
-    content,
-    metadata,
-    source_id,
-    1 - (archon_crawled_pages.embedding_1536 <=> query_embedding) AS similarity
-  FROM archon_crawled_pages
-  WHERE metadata @> filter
-    AND (source_filter IS NULL OR source_id = source_filter)
-    AND embedding_1536 IS NOT NULL
-  ORDER BY archon_crawled_pages.embedding_1536 <=> query_embedding
-  LIMIT match_count;
-END;
-$$;
-
--- Create a function to search for code examples
-CREATE OR REPLACE FUNCTION match_archon_code_examples (
-  query_embedding VECTOR(1536),
-  match_count INT DEFAULT 10,
-  filter JSONB DEFAULT '{}'::jsonb,
-  source_filter TEXT DEFAULT NULL
-) RETURNS TABLE (
-  id BIGINT,
-  url VARCHAR,
-  chunk_number INTEGER,
-  content TEXT,
-  summary TEXT,
-  metadata JSONB,
-  source_id TEXT,
-  similarity FLOAT
-)
-LANGUAGE plpgsql
-AS $$
-#variable_conflict use_column
-BEGIN
-  RETURN QUERY
-  SELECT
-    id,
-    url,
-    chunk_number,
-    content,
-    summary,
-    metadata,
-    source_id,
-    1 - (archon_code_examples.embedding_1536 <=> query_embedding) AS similarity
-  FROM archon_code_examples
-  WHERE metadata @> filter
-    AND (source_filter IS NULL OR source_id = source_filter)
-    AND embedding_1536 IS NOT NULL
-  ORDER BY archon_code_examples.embedding_1536 <=> query_embedding
-  LIMIT match_count;
-END;
-$$;
-
--- Create dynamic search functions for multi-dimensional embeddings
-CREATE OR REPLACE FUNCTION match_archon_crawled_pages_dynamic (
-  query_embedding_768 VECTOR(768) DEFAULT NULL,
-  query_embedding_1024 VECTOR(1024) DEFAULT NULL,
-  query_embedding_1536 VECTOR(1536) DEFAULT NULL,
-  query_embedding_3072 VECTOR(3072) DEFAULT NULL,
+  query_embedding VECTOR(1536) DEFAULT NULL,
   match_count INT DEFAULT 10,
   filter JSONB DEFAULT '{}'::jsonb,
   source_filter TEXT DEFAULT NULL
@@ -379,68 +300,70 @@ CREATE OR REPLACE FUNCTION match_archon_crawled_pages_dynamic (
 LANGUAGE plpgsql
 AS $$
 #variable_conflict use_column
+DECLARE
+  embedding_dimensions INT;
 BEGIN
-  -- Search using 768-dimension embeddings
-  IF query_embedding_768 IS NOT NULL THEN
-    RETURN QUERY
-    SELECT
-      id, url, chunk_number, content, metadata, source_id,
-      1 - (archon_crawled_pages.embedding_768 <=> query_embedding_768) AS similarity
-    FROM archon_crawled_pages
-    WHERE metadata @> filter
-      AND (source_filter IS NULL OR source_id = source_filter)
-      AND embedding_768 IS NOT NULL
-    ORDER BY archon_crawled_pages.embedding_768 <=> query_embedding_768
-    LIMIT match_count;
-  -- Search using 1024-dimension embeddings
-  ELSIF query_embedding_1024 IS NOT NULL THEN
-    RETURN QUERY
-    SELECT
-      id, url, chunk_number, content, metadata, source_id,
-      1 - (archon_crawled_pages.embedding_1024 <=> query_embedding_1024) AS similarity
-    FROM archon_crawled_pages
-    WHERE metadata @> filter
-      AND (source_filter IS NULL OR source_id = source_filter)
-      AND embedding_1024 IS NOT NULL
-    ORDER BY archon_crawled_pages.embedding_1024 <=> query_embedding_1024
-    LIMIT match_count;
-  -- Search using 1536-dimension embeddings
-  ELSIF query_embedding_1536 IS NOT NULL THEN
-    RETURN QUERY
-    SELECT
-      id, url, chunk_number, content, metadata, source_id,
-      1 - (archon_crawled_pages.embedding_1536 <=> query_embedding_1536) AS similarity
-    FROM archon_crawled_pages
-    WHERE metadata @> filter
-      AND (source_filter IS NULL OR source_id = source_filter)
-      AND embedding_1536 IS NOT NULL
-    ORDER BY archon_crawled_pages.embedding_1536 <=> query_embedding_1536
-    LIMIT match_count;
-  -- Search using 3072-dimension embeddings
-  ELSIF query_embedding_3072 IS NOT NULL THEN
-    RETURN QUERY
-    SELECT
-      id, url, chunk_number, content, metadata, source_id,
-      1 - (archon_crawled_pages.embedding_3072 <=> query_embedding_3072) AS similarity
-    FROM archon_crawled_pages
-    WHERE metadata @> filter
-      AND (source_filter IS NULL OR source_id = source_filter)
-      AND embedding_3072 IS NOT NULL
-    ORDER BY archon_crawled_pages.embedding_3072 <=> query_embedding_3072
-    LIMIT match_count;
-  -- Fallback to legacy embedding column
+  -- Auto-detect embedding dimensions from the provided vector
+  IF query_embedding IS NOT NULL THEN
+    embedding_dimensions := array_length(query_embedding, 1);
+    
+    -- Route to appropriate embedding column based on dimensions
+    IF embedding_dimensions = 768 THEN
+      RETURN QUERY
+      SELECT
+        id, url, chunk_number, content, metadata, source_id,
+        1 - (archon_crawled_pages.embedding_768 <=> query_embedding::VECTOR(768)) AS similarity
+      FROM archon_crawled_pages
+      WHERE metadata @> filter
+        AND (source_filter IS NULL OR source_id = source_filter)
+        AND embedding_768 IS NOT NULL
+      ORDER BY archon_crawled_pages.embedding_768 <=> query_embedding::VECTOR(768)
+      LIMIT match_count;
+    ELSIF embedding_dimensions = 1024 THEN
+      RETURN QUERY
+      SELECT
+        id, url, chunk_number, content, metadata, source_id,
+        1 - (archon_crawled_pages.embedding_1024 <=> query_embedding::VECTOR(1024)) AS similarity
+      FROM archon_crawled_pages
+      WHERE metadata @> filter
+        AND (source_filter IS NULL OR source_id = source_filter)
+        AND embedding_1024 IS NOT NULL
+      ORDER BY archon_crawled_pages.embedding_1024 <=> query_embedding::VECTOR(1024)
+      LIMIT match_count;
+    ELSIF embedding_dimensions = 1536 THEN
+      RETURN QUERY
+      SELECT
+        id, url, chunk_number, content, metadata, source_id,
+        1 - (archon_crawled_pages.embedding_1536 <=> query_embedding) AS similarity
+      FROM archon_crawled_pages
+      WHERE metadata @> filter
+        AND (source_filter IS NULL OR source_id = source_filter)
+        AND embedding_1536 IS NOT NULL
+      ORDER BY archon_crawled_pages.embedding_1536 <=> query_embedding
+      LIMIT match_count;
+    ELSIF embedding_dimensions = 3072 THEN
+      RETURN QUERY
+      SELECT
+        id, url, chunk_number, content, metadata, source_id,
+        1 - (archon_crawled_pages.embedding_3072 <=> query_embedding::VECTOR(3072)) AS similarity
+      FROM archon_crawled_pages
+      WHERE metadata @> filter
+        AND (source_filter IS NULL OR source_id = source_filter)
+        AND embedding_3072 IS NOT NULL
+      ORDER BY archon_crawled_pages.embedding_3072 <=> query_embedding::VECTOR(3072)
+      LIMIT match_count;
+    ELSE
+      RAISE EXCEPTION 'Unsupported embedding dimensions: %. Supported dimensions: 768, 1024, 1536, 3072', embedding_dimensions;
+    END IF;
   ELSE
     RAISE EXCEPTION 'No query embedding provided';
   END IF;
 END;
 $$;
 
--- Create dynamic search function for code examples
-CREATE OR REPLACE FUNCTION match_archon_code_examples_dynamic (
-  query_embedding_768 VECTOR(768) DEFAULT NULL,
-  query_embedding_1024 VECTOR(1024) DEFAULT NULL,
-  query_embedding_1536 VECTOR(1536) DEFAULT NULL,
-  query_embedding_3072 VECTOR(3072) DEFAULT NULL,
+-- Create a function to search for code examples (supports multi-dimensional embeddings)
+CREATE OR REPLACE FUNCTION match_archon_code_examples (
+  query_embedding VECTOR(1536) DEFAULT NULL,
   match_count INT DEFAULT 10,
   filter JSONB DEFAULT '{}'::jsonb,
   source_filter TEXT DEFAULT NULL
@@ -457,56 +380,61 @@ CREATE OR REPLACE FUNCTION match_archon_code_examples_dynamic (
 LANGUAGE plpgsql
 AS $$
 #variable_conflict use_column
+DECLARE
+  embedding_dimensions INT;
 BEGIN
-  -- Search using 768-dimension embeddings
-  IF query_embedding_768 IS NOT NULL THEN
-    RETURN QUERY
-    SELECT
-      id, url, chunk_number, content, summary, metadata, source_id,
-      1 - (archon_code_examples.embedding_768 <=> query_embedding_768) AS similarity
-    FROM archon_code_examples
-    WHERE metadata @> filter
-      AND (source_filter IS NULL OR source_id = source_filter)
-      AND embedding_768 IS NOT NULL
-    ORDER BY archon_code_examples.embedding_768 <=> query_embedding_768
-    LIMIT match_count;
-  -- Search using 1024-dimension embeddings
-  ELSIF query_embedding_1024 IS NOT NULL THEN
-    RETURN QUERY
-    SELECT
-      id, url, chunk_number, content, summary, metadata, source_id,
-      1 - (archon_code_examples.embedding_1024 <=> query_embedding_1024) AS similarity
-    FROM archon_code_examples
-    WHERE metadata @> filter
-      AND (source_filter IS NULL OR source_id = source_filter)
-      AND embedding_1024 IS NOT NULL
-    ORDER BY archon_code_examples.embedding_1024 <=> query_embedding_1024
-    LIMIT match_count;
-  -- Search using 1536-dimension embeddings
-  ELSIF query_embedding_1536 IS NOT NULL THEN
-    RETURN QUERY
-    SELECT
-      id, url, chunk_number, content, summary, metadata, source_id,
-      1 - (archon_code_examples.embedding_1536 <=> query_embedding_1536) AS similarity
-    FROM archon_code_examples
-    WHERE metadata @> filter
-      AND (source_filter IS NULL OR source_id = source_filter)
-      AND embedding_1536 IS NOT NULL
-    ORDER BY archon_code_examples.embedding_1536 <=> query_embedding_1536
-    LIMIT match_count;
-  -- Search using 3072-dimension embeddings
-  ELSIF query_embedding_3072 IS NOT NULL THEN
-    RETURN QUERY
-    SELECT
-      id, url, chunk_number, content, summary, metadata, source_id,
-      1 - (archon_code_examples.embedding_3072 <=> query_embedding_3072) AS similarity
-    FROM archon_code_examples
-    WHERE metadata @> filter
-      AND (source_filter IS NULL OR source_id = source_filter)
-      AND embedding_3072 IS NOT NULL
-    ORDER BY archon_code_examples.embedding_3072 <=> query_embedding_3072
-    LIMIT match_count;
-  -- Fallback to legacy embedding column
+  -- Auto-detect embedding dimensions from the provided vector
+  IF query_embedding IS NOT NULL THEN
+    embedding_dimensions := array_length(query_embedding, 1);
+    
+    -- Route to appropriate embedding column based on dimensions
+    IF embedding_dimensions = 768 THEN
+      RETURN QUERY
+      SELECT
+        id, url, chunk_number, content, summary, metadata, source_id,
+        1 - (archon_code_examples.embedding_768 <=> query_embedding::VECTOR(768)) AS similarity
+      FROM archon_code_examples
+      WHERE metadata @> filter
+        AND (source_filter IS NULL OR source_id = source_filter)
+        AND embedding_768 IS NOT NULL
+      ORDER BY archon_code_examples.embedding_768 <=> query_embedding::VECTOR(768)
+      LIMIT match_count;
+    ELSIF embedding_dimensions = 1024 THEN
+      RETURN QUERY
+      SELECT
+        id, url, chunk_number, content, summary, metadata, source_id,
+        1 - (archon_code_examples.embedding_1024 <=> query_embedding::VECTOR(1024)) AS similarity
+      FROM archon_code_examples
+      WHERE metadata @> filter
+        AND (source_filter IS NULL OR source_id = source_filter)
+        AND embedding_1024 IS NOT NULL
+      ORDER BY archon_code_examples.embedding_1024 <=> query_embedding::VECTOR(1024)
+      LIMIT match_count;
+    ELSIF embedding_dimensions = 1536 THEN
+      RETURN QUERY
+      SELECT
+        id, url, chunk_number, content, summary, metadata, source_id,
+        1 - (archon_code_examples.embedding_1536 <=> query_embedding) AS similarity
+      FROM archon_code_examples
+      WHERE metadata @> filter
+        AND (source_filter IS NULL OR source_id = source_filter)
+        AND embedding_1536 IS NOT NULL
+      ORDER BY archon_code_examples.embedding_1536 <=> query_embedding
+      LIMIT match_count;
+    ELSIF embedding_dimensions = 3072 THEN
+      RETURN QUERY
+      SELECT
+        id, url, chunk_number, content, summary, metadata, source_id,
+        1 - (archon_code_examples.embedding_3072 <=> query_embedding::VECTOR(3072)) AS similarity
+      FROM archon_code_examples
+      WHERE metadata @> filter
+        AND (source_filter IS NULL OR source_id = source_filter)
+        AND embedding_3072 IS NOT NULL
+      ORDER BY archon_code_examples.embedding_3072 <=> query_embedding::VECTOR(3072)
+      LIMIT match_count;
+    ELSE
+      RAISE EXCEPTION 'Unsupported embedding dimensions: %. Supported dimensions: 768, 1024, 1536, 3072', embedding_dimensions;
+    END IF;
   ELSE
     RAISE EXCEPTION 'No query embedding provided';
   END IF;
diff --git a/migration/upgrade_multi_dimensional_vectors.sql b/migration/upgrade_multi_dimensional_vectors.sql
index c14d36f..db8184a 100644
--- a/migration/upgrade_multi_dimensional_vectors.sql
+++ b/migration/upgrade_multi_dimensional_vectors.sql
@@ -191,9 +191,9 @@ DO $$
 BEGIN
     RAISE NOTICE 'Updating legacy search functions to use embedding_1536...';
     
-    -- Update the legacy match_archon_crawled_pages function to use embedding_1536
+    -- Update the legacy match_archon_crawled_pages function with dynamic multi-dimensional logic
     CREATE OR REPLACE FUNCTION match_archon_crawled_pages (
-      query_embedding VECTOR(1536),
+      query_embedding VECTOR(1536) DEFAULT NULL,
       match_count INT DEFAULT 10,
       filter JSONB DEFAULT '{}'::jsonb,
       source_filter TEXT DEFAULT NULL
@@ -209,28 +209,70 @@ BEGIN
     LANGUAGE plpgsql
     AS $$
     #variable_conflict use_column
+    DECLARE
+      embedding_dimensions INT;
     BEGIN
-      RETURN QUERY
-      SELECT
-        id,
-        url,
-        chunk_number,
-        content,
-        metadata,
-        source_id,
-        1 - (archon_crawled_pages.embedding_1536 <=> query_embedding) AS similarity
-      FROM archon_crawled_pages
-      WHERE metadata @> filter
-        AND (source_filter IS NULL OR source_id = source_filter)
-        AND embedding_1536 IS NOT NULL
-      ORDER BY archon_crawled_pages.embedding_1536 <=> query_embedding
-      LIMIT match_count;
+      -- Auto-detect embedding dimensions from the provided vector
+      IF query_embedding IS NOT NULL THEN
+        embedding_dimensions := array_length(query_embedding, 1);
+        
+        -- Route to appropriate embedding column based on dimensions
+        IF embedding_dimensions = 768 THEN
+          RETURN QUERY
+          SELECT
+            id, url, chunk_number, content, metadata, source_id,
+            1 - (archon_crawled_pages.embedding_768 <=> query_embedding::VECTOR(768)) AS similarity
+          FROM archon_crawled_pages
+          WHERE metadata @> filter
+            AND (source_filter IS NULL OR source_id = source_filter)
+            AND embedding_768 IS NOT NULL
+          ORDER BY archon_crawled_pages.embedding_768 <=> query_embedding::VECTOR(768)
+          LIMIT match_count;
+        ELSIF embedding_dimensions = 1024 THEN
+          RETURN QUERY
+          SELECT
+            id, url, chunk_number, content, metadata, source_id,
+            1 - (archon_crawled_pages.embedding_1024 <=> query_embedding::VECTOR(1024)) AS similarity
+          FROM archon_crawled_pages
+          WHERE metadata @> filter
+            AND (source_filter IS NULL OR source_id = source_filter)
+            AND embedding_1024 IS NOT NULL
+          ORDER BY archon_crawled_pages.embedding_1024 <=> query_embedding::VECTOR(1024)
+          LIMIT match_count;
+        ELSIF embedding_dimensions = 1536 THEN
+          RETURN QUERY
+          SELECT
+            id, url, chunk_number, content, metadata, source_id,
+            1 - (archon_crawled_pages.embedding_1536 <=> query_embedding) AS similarity
+          FROM archon_crawled_pages
+          WHERE metadata @> filter
+            AND (source_filter IS NULL OR source_id = source_filter)
+            AND embedding_1536 IS NOT NULL
+          ORDER BY archon_crawled_pages.embedding_1536 <=> query_embedding
+          LIMIT match_count;
+        ELSIF embedding_dimensions = 3072 THEN
+          RETURN QUERY
+          SELECT
+            id, url, chunk_number, content, metadata, source_id,
+            1 - (archon_crawled_pages.embedding_3072 <=> query_embedding::VECTOR(3072)) AS similarity
+          FROM archon_crawled_pages
+          WHERE metadata @> filter
+            AND (source_filter IS NULL OR source_id = source_filter)
+            AND embedding_3072 IS NOT NULL
+          ORDER BY archon_crawled_pages.embedding_3072 <=> query_embedding::VECTOR(3072)
+          LIMIT match_count;
+        ELSE
+          RAISE EXCEPTION 'Unsupported embedding dimensions: %. Supported dimensions: 768, 1024, 1536, 3072', embedding_dimensions;
+        END IF;
+      ELSE
+        RAISE EXCEPTION 'No query embedding provided';
+      END IF;
     END;
     $$;
     
-    -- Update the legacy match_archon_code_examples function to use embedding_1536
+    -- Update the legacy match_archon_code_examples function with dynamic multi-dimensional logic
     CREATE OR REPLACE FUNCTION match_archon_code_examples (
-      query_embedding VECTOR(1536),
+      query_embedding VECTOR(1536) DEFAULT NULL,
       match_count INT DEFAULT 10,
       filter JSONB DEFAULT '{}'::jsonb,
       source_filter TEXT DEFAULT NULL
@@ -247,23 +289,64 @@ BEGIN
     LANGUAGE plpgsql
     AS $$
     #variable_conflict use_column
+    DECLARE
+      embedding_dimensions INT;
     BEGIN
-      RETURN QUERY
-      SELECT
-        id,
-        url,
-        chunk_number,
-        content,
-        summary,
-        metadata,
-        source_id,
-        1 - (archon_code_examples.embedding_1536 <=> query_embedding) AS similarity
-      FROM archon_code_examples
-      WHERE metadata @> filter
-        AND (source_filter IS NULL OR source_id = source_filter)
-        AND embedding_1536 IS NOT NULL
-      ORDER BY archon_code_examples.embedding_1536 <=> query_embedding
-      LIMIT match_count;
+      -- Auto-detect embedding dimensions from the provided vector
+      IF query_embedding IS NOT NULL THEN
+        embedding_dimensions := array_length(query_embedding, 1);
+        
+        -- Route to appropriate embedding column based on dimensions
+        IF embedding_dimensions = 768 THEN
+          RETURN QUERY
+          SELECT
+            id, url, chunk_number, content, summary, metadata, source_id,
+            1 - (archon_code_examples.embedding_768 <=> query_embedding::VECTOR(768)) AS similarity
+          FROM archon_code_examples
+          WHERE metadata @> filter
+            AND (source_filter IS NULL OR source_id = source_filter)
+            AND embedding_768 IS NOT NULL
+          ORDER BY archon_code_examples.embedding_768 <=> query_embedding::VECTOR(768)
+          LIMIT match_count;
+        ELSIF embedding_dimensions = 1024 THEN
+          RETURN QUERY
+          SELECT
+            id, url, chunk_number, content, summary, metadata, source_id,
+            1 - (archon_code_examples.embedding_1024 <=> query_embedding::VECTOR(1024)) AS similarity
+          FROM archon_code_examples
+          WHERE metadata @> filter
+            AND (source_filter IS NULL OR source_id = source_filter)
+            AND embedding_1024 IS NOT NULL
+          ORDER BY archon_code_examples.embedding_1024 <=> query_embedding::VECTOR(1024)
+          LIMIT match_count;
+        ELSIF embedding_dimensions = 1536 THEN
+          RETURN QUERY
+          SELECT
+            id, url, chunk_number, content, summary, metadata, source_id,
+            1 - (archon_code_examples.embedding_1536 <=> query_embedding) AS similarity
+          FROM archon_code_examples
+          WHERE metadata @> filter
+            AND (source_filter IS NULL OR source_id = source_filter)
+            AND embedding_1536 IS NOT NULL
+          ORDER BY archon_code_examples.embedding_1536 <=> query_embedding
+          LIMIT match_count;
+        ELSIF embedding_dimensions = 3072 THEN
+          RETURN QUERY
+          SELECT
+            id, url, chunk_number, content, summary, metadata, source_id,
+            1 - (archon_code_examples.embedding_3072 <=> query_embedding::VECTOR(3072)) AS similarity
+          FROM archon_code_examples
+          WHERE metadata @> filter
+            AND (source_filter IS NULL OR source_id = source_filter)
+            AND embedding_3072 IS NOT NULL
+          ORDER BY archon_code_examples.embedding_3072 <=> query_embedding::VECTOR(3072)
+          LIMIT match_count;
+        ELSE
+          RAISE EXCEPTION 'Unsupported embedding dimensions: %. Supported dimensions: 768, 1024, 1536, 3072', embedding_dimensions;
+        END IF;
+      ELSE
+        RAISE EXCEPTION 'No query embedding provided';
+      END IF;
     END;
     $$;
     
@@ -276,178 +359,7 @@ EXCEPTION WHEN OTHERS THEN
 END $$;
 
 -- =====================================================
--- SECTION 6: DYNAMIC SEARCH FUNCTIONS
--- =====================================================
-
-DO $$
-BEGIN
-    RAISE NOTICE 'Creating dynamic multi-dimensional search functions...';
-    
-    -- Drop existing dynamic functions if they exist
-    DROP FUNCTION IF EXISTS match_archon_crawled_pages_dynamic(vector, vector, vector, vector, int, jsonb, text) CASCADE;
-    DROP FUNCTION IF EXISTS match_archon_code_examples_dynamic(vector, vector, vector, vector, int, jsonb, text) CASCADE;
-    
-EXCEPTION WHEN OTHERS THEN
-    RAISE NOTICE 'Note: No existing dynamic functions to drop (this is normal for first-time upgrade)';
-END $$;
-
--- Create dynamic search function for documentation chunks
-CREATE OR REPLACE FUNCTION match_archon_crawled_pages_dynamic (
-  query_embedding_768 VECTOR(768) DEFAULT NULL,
-  query_embedding_1024 VECTOR(1024) DEFAULT NULL,
-  query_embedding_1536 VECTOR(1536) DEFAULT NULL,
-  query_embedding_3072 VECTOR(3072) DEFAULT NULL,
-  match_count INT DEFAULT 10,
-  filter JSONB DEFAULT '{}'::jsonb,
-  source_filter TEXT DEFAULT NULL
-) RETURNS TABLE (
-  id BIGINT,
-  url VARCHAR,
-  chunk_number INTEGER,
-  content TEXT,
-  metadata JSONB,
-  source_id TEXT,
-  similarity FLOAT
-)
-LANGUAGE plpgsql
-AS $$
-#variable_conflict use_column
-BEGIN
-  -- Search using 768-dimension embeddings
-  IF query_embedding_768 IS NOT NULL THEN
-    RETURN QUERY
-    SELECT
-      id, url, chunk_number, content, metadata, source_id,
-      1 - (archon_crawled_pages.embedding_768 <=> query_embedding_768) AS similarity
-    FROM archon_crawled_pages
-    WHERE metadata @> filter
-      AND (source_filter IS NULL OR source_id = source_filter)
-      AND embedding_768 IS NOT NULL
-    ORDER BY archon_crawled_pages.embedding_768 <=> query_embedding_768
-    LIMIT match_count;
-  -- Search using 1024-dimension embeddings
-  ELSIF query_embedding_1024 IS NOT NULL THEN
-    RETURN QUERY
-    SELECT
-      id, url, chunk_number, content, metadata, source_id,
-      1 - (archon_crawled_pages.embedding_1024 <=> query_embedding_1024) AS similarity
-    FROM archon_crawled_pages
-    WHERE metadata @> filter
-      AND (source_filter IS NULL OR source_id = source_filter)
-      AND embedding_1024 IS NOT NULL
-    ORDER BY archon_crawled_pages.embedding_1024 <=> query_embedding_1024
-    LIMIT match_count;
-  -- Search using 1536-dimension embeddings
-  ELSIF query_embedding_1536 IS NOT NULL THEN
-    RETURN QUERY
-    SELECT
-      id, url, chunk_number, content, metadata, source_id,
-      1 - (archon_crawled_pages.embedding_1536 <=> query_embedding_1536) AS similarity
-    FROM archon_crawled_pages
-    WHERE metadata @> filter
-      AND (source_filter IS NULL OR source_id = source_filter)
-      AND embedding_1536 IS NOT NULL
-    ORDER BY archon_crawled_pages.embedding_1536 <=> query_embedding_1536
-    LIMIT match_count;
-  -- Search using 3072-dimension embeddings
-  ELSIF query_embedding_3072 IS NOT NULL THEN
-    RETURN QUERY
-    SELECT
-      id, url, chunk_number, content, metadata, source_id,
-      1 - (archon_crawled_pages.embedding_3072 <=> query_embedding_3072) AS similarity
-    FROM archon_crawled_pages
-    WHERE metadata @> filter
-      AND (source_filter IS NULL OR source_id = source_filter)
-      AND embedding_3072 IS NOT NULL
-    ORDER BY archon_crawled_pages.embedding_3072 <=> query_embedding_3072
-    LIMIT match_count;
-  -- Fallback to legacy embedding column
-  ELSE
-    RAISE EXCEPTION 'No query embedding provided';
-  END IF;
-END;
-$$;
-
--- Create dynamic search function for code examples
-CREATE OR REPLACE FUNCTION match_archon_code_examples_dynamic (
-  query_embedding_768 VECTOR(768) DEFAULT NULL,
-  query_embedding_1024 VECTOR(1024) DEFAULT NULL,
-  query_embedding_1536 VECTOR(1536) DEFAULT NULL,
-  query_embedding_3072 VECTOR(3072) DEFAULT NULL,
-  match_count INT DEFAULT 10,
-  filter JSONB DEFAULT '{}'::jsonb,
-  source_filter TEXT DEFAULT NULL
-) RETURNS TABLE (
-  id BIGINT,
-  url VARCHAR,
-  chunk_number INTEGER,
-  content TEXT,
-  summary TEXT,
-  metadata JSONB,
-  source_id TEXT,
-  similarity FLOAT
-)
-LANGUAGE plpgsql
-AS $$
-#variable_conflict use_column
-BEGIN
-  -- Search using 768-dimension embeddings
-  IF query_embedding_768 IS NOT NULL THEN
-    RETURN QUERY
-    SELECT
-      id, url, chunk_number, content, summary, metadata, source_id,
-      1 - (archon_code_examples.embedding_768 <=> query_embedding_768) AS similarity
-    FROM archon_code_examples
-    WHERE metadata @> filter
-      AND (source_filter IS NULL OR source_id = source_filter)
-      AND embedding_768 IS NOT NULL
-    ORDER BY archon_code_examples.embedding_768 <=> query_embedding_768
-    LIMIT match_count;
-  -- Search using 1024-dimension embeddings
-  ELSIF query_embedding_1024 IS NOT NULL THEN
-    RETURN QUERY
-    SELECT
-      id, url, chunk_number, content, summary, metadata, source_id,
-      1 - (archon_code_examples.embedding_1024 <=> query_embedding_1024) AS similarity
-    FROM archon_code_examples
-    WHERE metadata @> filter
-      AND (source_filter IS NULL OR source_id = source_filter)
-      AND embedding_1024 IS NOT NULL
-    ORDER BY archon_code_examples.embedding_1024 <=> query_embedding_1024
-    LIMIT match_count;
-  -- Search using 1536-dimension embeddings
-  ELSIF query_embedding_1536 IS NOT NULL THEN
-    RETURN QUERY
-    SELECT
-      id, url, chunk_number, content, summary, metadata, source_id,
-      1 - (archon_code_examples.embedding_1536 <=> query_embedding_1536) AS similarity
-    FROM archon_code_examples
-    WHERE metadata @> filter
-      AND (source_filter IS NULL OR source_id = source_filter)
-      AND embedding_1536 IS NOT NULL
-    ORDER BY archon_code_examples.embedding_1536 <=> query_embedding_1536
-    LIMIT match_count;
-  -- Search using 3072-dimension embeddings
-  ELSIF query_embedding_3072 IS NOT NULL THEN
-    RETURN QUERY
-    SELECT
-      id, url, chunk_number, content, summary, metadata, source_id,
-      1 - (archon_code_examples.embedding_3072 <=> query_embedding_3072) AS similarity
-    FROM archon_code_examples
-    WHERE metadata @> filter
-      AND (source_filter IS NULL OR source_id = source_filter)
-      AND embedding_3072 IS NOT NULL
-    ORDER BY archon_code_examples.embedding_3072 <=> query_embedding_3072
-    LIMIT match_count;
-  -- Fallback to legacy embedding column
-  ELSE
-    RAISE EXCEPTION 'No query embedding provided';
-  END IF;
-END;
-$$;
-
--- =====================================================
--- SECTION 4: VERIFICATION AND SUMMARY
+-- SECTION 6: VERIFICATION AND SUMMARY
 -- =====================================================
 
 DO $$
-- 
2.39.5

